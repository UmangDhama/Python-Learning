%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Abst. background_012.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Tom
%%CreationDate: 2/24/2015
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 16875 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFC1FD09C0C8FD05FF8EB18EB1C4FD04FFCFC6CCC6CCC6CCC6CCC6
%CCCFFD04FFCF5C5C5C88FD05FFAF141B143D1A3D143D148BFD04FFAF3D14
%3D143DFD08FF948E6994CAFD05FF8CB4FCFC8CB4FCFC8CB4CAFFFFAF141B
%143D1A3D143DFD04FFADFD075C82FFFFFFC8FD09C0C9FD05FFC48E8E94FD
%05FFCFC6C6FEC6C6C6FEC6C6C6FD06FFAD5681A8FD05FFA91B141B141B14
%1B141B85FD05FF601B141B84FD08FFCA8E8E9BFD05FFCAB48CFC8CFC8CFC
%8CFC8CFFFFFFA91B141B141B14153CFD05FF5C5C565C5C5C32AEFFFFFFC9
%FD08C0C1CFFD06FFCBC4FD07FFC8FEC6CCC6CCC6CCC6CDFD10FF3C1B141B
%143D141B3CFD07FF858BAFFD13FFBCFC8CB4FCFC8CFCFCC3FD04FF611B14
%1B141B14FD06FFADFD055C88FD05FFC2C0C0C0BAC0BAC0C9FD11FFC7FD06
%C6CCCFFD11FF141B141B141B14AFFD1EFF93FC8CFC8CFC8CBBFD06FF603D
%141B36AFFD07FFAD5D5C5CADFD07FFC9C7C0C0C0C7C9FD13FFC8CCC6FEC6
%CEFD14FF613D143D61FD21FFBCB5FCFCFCC3FD09FFAFAFFD17FFCFC9CFFD
%16FFCFCFCEFD0FFFCAC8C1C7C1C9FD28FFCACACAFD05FFCAFD48FFC9FD06
%C0C8FD2CFFCFC9C1C1C1C9FD2FFFCACACAFD13FFC9C0BAFD05C0BAC7FD2A
%FFCAC1BAC0BABABAC2FD16FFBBC3FD15FFC9C1BAC0C2FD12FFC7FD09C0CF
%FD29FFC8BAC1BAC1BAC1BAC9FD13FFCAB58CFCC9FD13FFCAC0BAC0BABAC9
%FD10FFCFFD0AC0C2FD13FF9BCAFD14FFBAC0BAC0BAC0BAC0C1FD12FFCA8C
%FCFC8CC3FD13FFC9BAC0BAC1BAC8FD10FFC9FD0AC0C8FD12FFC4B18EFD13
%FFC9C0BAC0BAC1BAC0BAC1FD12FFBCFCFC8CFCA0FD13FFC9BABAC0BABAC2
%FD10FFCABAFD09C0C1FD12FFCB8EBDFD13FFCFBAC0BAC0BAC0BABABAFD12
%FFC38CFCFCBCFD15FFC2C0BAC0C1FD11FFCFC7FD09C0CEFD29FFC1BAC1BA
%C1BAC1BAC8FD13FFBCFCCAFD17FFC9C2C2FD13FFC8FD07C0BAC1FD0DFFCF
%CAFD1BFFC9C0BAC0BAC0BAC1CAFD44FFC7FD07C0CAFD0BFFC8C7C0C0C0C7
%C9FD19FFC9C1BAC0BAC2CFFD40FFA1BD8EB79BCAC8C1C0C0C0C8CAFD0AFF
%C9C0C0BAC0C0C0BAC0C0CFFD18FFCACFC9CFFD40FFCB94B18EB18EB18EC4
%FFFFCAFD0CFFCFFD0BC0FD39FFCFC9CFFD0AFFCACBCBFD12FFCBFD058EB1
%8E8E8DBEFD0EFFFD0CC0C1FD04FFCFC8C8C9FD2FFFC2BAC0BAC8FD08FF9B
%959495A2FD11FF95B18EB18EB18EB18EB18ECBFD0CFFC8FD0DC0C9FFFFCE
%FD04C6C7FD15FFC8C7C1CFFD14FFC2BABABAC0BAC9FD06FF948E8E948E94
%A8FD0FFFA8FD0B8E95FD05FFCAC8C9FD04FFC1FD0CC0BAC8FFCFC6C6A4C6
%C6C6A5FD07FF843736A9FD08FFC1C0BAC0BAC9FD08FFCAC4A8FD08FFBAC0
%BAC1BAC0C1FD05FFCA9494B794958EC4FD08FF87ACFD05FFCA8EB18EB28E
%B18EB28EB18EB7FD04FFCFC1BAC0CAFFFFFFFD0EC0C1FFC8C6C6FEC6C6C6
%CCCFFD05FFAF37141514FD07FFC9FD05C0C1FD08FF956994CBFD06FFC9C0
%BAC0BAC0BAC0CAFD04FFCA8E948E9494949BFD07FFAE865CCFFD04FFA1B1
%8E8E8EB18E8E8EB18E8E8EFD04FFCABAC0BAC9FFFFCAFD0EC0C1FFCDFD07
%C6CFFD05FFAF0E151415A9FD06FFC9BAFD04C0C1FD08FF698E69CAFD07FF
%BAC0BAC0BAC0C1FD05FFCA95949594958EC4FD08FFADADFD05FFCA8EB18E
%B18EB18EB18EB18EB7FD05FFC2BAC1CAFFFFFFFD0EC0C1FFC8FD06C6C7FD
%07FF3D0E1536FD07FFCFFD05C0C1FD08FFC38E9BFD08FFC9FD05BACAFD06
%FF9B8E8E946995CAFD0FFFCA8E8DFD098E9BFD05FFCACFCFFD04FFC1BAFD
%0BC0BAC8FFCFA4C6C6C6A4C6C8FD07FFA9855AFD09FFC8C0BAC0C0CFFD14
%FFC9C1C1C1CFFD08FFC4BD95C4FD12FF9BB18EB18EB28EB18EB18EFD0DFF
%C9FD0DC0CFFFFFCFC6C6C6CCC8FD15FFCAC9C9FD3AFF94FD048EB18E8E8D
%C4FD0EFFC1FD0BC0C2FD05FFC9CFCAFD54FF9BB18EB18EB194CAFD10FFFD
%0AC0C1FD4BFFC4949594C4CBFD0DFFA8C49BC4A2FFFFFFA8FD0EFFCFC1C0
%BAC0BAC0BAC0C2FD35FFCECFFD14FFBD8EB18EB18EB7CAFD13FF99B58CB5
%C3FD0DFFCAC8C1C8C1C9CAFD1BFFCECECEFD16FFCFC8C6C6C8FD12FFBD8D
%B18E8E8EB18DB7FD12FFFD068CA1FD2DFFC7C6C6C6C7FD14FFCDFD05C6CE
%FD11FF8EB18EB18EB18EB18ECAFD10FF9AFD048CFC8CB5FD14FFAF6785FD
%15FFC7FEC6CCC6FECDFD12FFCFC6C6C6A4C6C6C8FD10FFA2FD098E9BFD10
%FF93FD078CCAFD13FF61141B85FD13FFCFFD06C6CCFD12FFA6C6C6C6FEC6
%C6C8FD10FFCB8EB18EB28EB18EB28EC4FD10FF93FC8CFC8CB48CFCCAFD13
%FF611B14AFFD14FFC6CCC6CCC6FEC7FD12FFCEFD06C6CFFD10FFCAB18E8E
%8EB18E8E8EB1C4FD10FFBCFD078CFD14FFAF608BFD15FFCDC6FEC6C6C6CE
%FD12FFC9FD05C6CEFD12FF9BB18EB18EB18EB194FD12FFB58CFC8C8C8CC3
%FD2CFFCFCCC6FEC6CDFD14FFC8C6C6C8CFFD14FF948E8D8E8D8E8ECBFD12
%FFCA9A8C8C93C3FD0EFFCAC3A0C3CAFD1BFFCFCEC8CFFD16FFC9CDFD17FF
%C4BD94BDC4FD26FFCAB5FC8CFCFCB4B5FD77FFC38CFC8CFC8CFC8CFC8CCA
%FD05FFC39ABC9ACAFD55FFC9CECDCFFD11FFCAFCFC8CB4FCFC8CB4FCFC8C
%FFFFFFCAB5FD058CC3FD2FFFCFFD17FFCFCEC9FD08FFCFC7FD04C6CDFD10
%FF8CFC8CFC8CFC8CFC8CFC8CFC93FFCAFD088CC3FD13FFAD81ADA8FD15FF
%CFC1C1C1FD0BFFCAFD09FFCFCCC6FEC6CFFD06FFC7FEC6CCC6FEC6CEFD07
%FFCB9BCAFD04FFC3FCFCFC8CB4FCFC8CB4FCFC8CB4CABC8CB48CFC8CB48C
%8C8CFD12FF88385C5C5CAEFD08FFAD87ACCFFD08FFFD04BAC1FD08FFCFBA
%BAC2FD08FFCCFD04C6C7FD05FFC9FEC6C6C6FEC6C6C7FD06FFCA698E69A2
%FFFFFFBC8CFC8CFC8CFC8CFC8CFC8CFC8CC3FD0A8CA1FD05FFCF8282FD08
%FFAE325C565C3281FD07FFAC5C865C87FD07FFC9C0BAC1BAC1CFFD07FFC2
%C0BAC0FD08FFC6CCC6CCC6CCCFFD04FFCEC6CCC6CCC6CCC6CCCFFD05FF9B
%8E6A8E94FFFFFFBCFC8CB4FCFC8CB4FCFC8CB4FCFC9AB58C8C8CFC8C8C8C
%FC8CC3FD05FFAE385CA7FD07FF82FD065CFD07FF81865C8680FD07FFCFFD
%05BAFD08FFC9BABAC1FD07FFCFFD06C6FD05FFC9FD08C6FD06FFC4698E69
%9BFFFFFFBC8CFC8CFC8CFC8CFC8CFC8CFC8CC2FD0A8C9AFD05FFA8815CCF
%FD07FFAD325C565C325DFD07FF885C805C87FD08FFC9BAC0BACFFD09FFCF
%C9FD09FFCEFEC6FEC6CEFD06FFC6FEC6CCC6CCC6CDFD07FFC494BDFD04FF
%C3FC8CB4FCFC8CB4FCFC8CB4FCFCCABC8CFC8CB48CFC8CFC8CCAFD11FF87
%FD045CA7FD07FFCF875C87AEFD09FFCFC9FD17FFC9CDC7CEFD07FFCEFD05
%C6CCCFFD0FFF8CFC8CFC8CFC8CFC8CFC8CFC92FFA1FD088CBCFD12FFA882
%5C8183FD0AFFCFCFFD2FFFCFC7CCC7CEFD11FFC3FCFC8CB4FCFC8CB4FCFC
%8CCAFFFF9AFC8C8C8CFC8CB5FD55FFCFFD14FFBB8CFC8CFC8CFC8CFCFCC2
%FD04FFA1BC8C8C93C3FD6CFFC28CFCFCFC8CFCB4A161616185FD49FFC9C9
%C9FD28FFCA9ABC93BCC38515150E150E37A9FD46FFC1C0BAC0C0CFFD14FF
%C4BD95C4FD13FFAF1415141514371437AFFD13FF9BBDA2FD18FF93CAFD14
%FFC1BABAC0BABABAFD13FFA28E8D8E8DB7FD12FF14140E1514140E150E85
%FD12FF948E6A8E95FD15FFA1B58C8CFD13FFCAC1BAC1BAC1BAC0C9FD12FF
%B78EB78EB18ECBFD10FFAF15143714371437141536FD11FFA19494B79494
%C4FD13FFCAFC8C8C8CCAFD12FFCABAC0BAC0BAC0BAC9FD12FF8E8E8EB18E
%8EA1FD10FFAF14151415141514151437FD11FFC38E948E948EC4FD13FFC3
%8C8C8C9AFD13FFCFC1BAC1BAC0BAC0C9FD12FFBD8EB18EB18ECBFD10FFA9
%3714151437141514153DFD11FFA29494958E94CAFD13FFCAB58CA1FD15FF
%C2BABAC0BABAC1FD13FFA8B78D8E8DC4FD12FF361514140E1514150E83C8
%C8C8CFCFFD0DFF9B948E949BFD15FFCAC3FD17FFC2C1BAC1C2FD16FFC49B
%CBFD14FF141514371415155AFD05C0C7C9FD0DFFCACACAFD30FFCACFCAFD
%2EFFAF36150E151459FD08C0C1FD11FFC2C2BBC1C2C9FD3BFFCFCFCFFD1D
%FFAF837BC1FD0AC0C1FD0EFFC9BAC0BAC0BAC0BAC2CAFD2BFFC3938C8C93
%A1FD06FFCFC7FD04C6CEFD0AFFAEFD10FFCFFD0EC0C2FD0CFFC9BABABAC0
%BAC0BAC0BAC1CAFD29FFC38CFC8CFC8CFCBCFD04FFCFC6FEC6CCC6CCC6CD
%FD06FFA7815C8183FD0FFFC8FD0EC0C7CFFFCFAC818782FD05FFBAC0BAC1
%BAC1BAC1BAC1BAC8FD04FFCFCDC7CDCEFD08FFCAA194C4FD0AFF848BAFFD
%06FFC3FD088CA1FFFFFFC7C6C6FEC6C6C6FEC6CEFD04FF825C325C325C82
%FD08FFCAA1FFFFFFCAFD0FC0BAC9AF875C865C5C5CFFFFFFC2BABAC0BAC0
%BAC0BAC0BAC0BACFFFFFC9FD05C6C8FD07FF9B698E69C4FD08FF3D1B143D
%AFFD05FF93FC8C8C8CFC8C8C8CBCFFFFCEFEC6CCC6CCC6CCC6FEC7FFFFFF
%AEFD075CADFD06FFC38C8C8CCAFFCFFD10C0C2AC5C865C86808682FFFFC1
%BAC1BAC0BAC1BAC0BAC1BAC0C2FFFFC7FD06C6CFFD05FFCA698E698E69FD
%07FF841B141B1461FD04FFCAFD0A8CFFFFCEFD09C6C7CFFFFFAD325C325C
%565C32ADFD06FFFD048C93FFC9C0BAFD0EC0C780865C805C865C87AFFFBA
%BABAC0BAC0BAC0BAC0BAC0BAC2FFCFC6C6A4C6C6C69ECEFD05FFA88E8E94
%6994FD07FFAF141B141B61FD05FF8CFC8CFC8CB48CFC8CB5FFFFCEFEC6CC
%C6CCC6CCC6CCC6FFFFFFADFD075C82FD06FFB58CFC8CBCFFCEFD10C0C187
%80865C86808681FFCFC1BAC1BAC1BAC1BAC1BAC1BAC0C2FFCFC6C6FEFD04
%C6CEFD06FF948E698D9BFD08FF61141514AFFD05FF93FD088C93FFFFCFC6
%FEC6C6C6FEC6C6C6CCFFFFFFCF5C5C565C5C5C32AEFD06FFA18C8C8CA1FF
%C9FD10C0C882865C805C865CACFFFFBABABAC0BAC0BAC0BAC0BAC0BAC9FF
%FFFD07C6FD08FF9BBDA1FD0AFFAF85FD07FFC38C8CFC8C8C8CFC8CCAFFFF
%FFCCC6CCC6CCC6CCC6FEC9FD04FFADFD045C3888FD08FFCAC3CAFFFFFFFD
%10C0C9FF80865C865C87CFFFFFC8BAC1BAC1BAC0BAC1BAC0BAC0CAFFFFCF
%FD05C6CEFD1FFF9AFD068CBCFD04FFCFFD07C6C8FD06FFAD5D5C5CADFD0F
%FFC8BAFD0EC0FFFFCF818780ACA8FFFFFFCAC0BAC0BAC0BAC0BAC0BABAC1
%FD04FFCFC7C7A5CFFD21FFC3BC8CB593CAFD06FFCFCDC6FEC6CCCEFD1BFF
%CFFD0EC0C9FD0CFFC9C0BAC1BAC1BAC1BAC0C0FD0EFFC4CBFD1EFFCAFD0B
%FFCECFCFFD1DFFC2FD0BC0BAC7FD0EFFC9C0BAC0BABABAC0C1FD0DFFCACA
%B18EBDCBFD46FFC48EB78EB6BAC6FD07C0C8FD0CFFAF8BA9FFCFC9C1C1C1
%C8C9FD0DFF9BB18E8E8E8D95CAFD2DFFCACACAFD14FFBD8DB18EB18EB198
%C0BAC0BAC0C0C9FD0BFFAF141B141B36FFFFFFCAFD0FFFFD048EB28EB18E
%C4FD13FFAF618BFD16FFBCFC8CB5CAFD12FFC48EB28EB28EB28EB7C9C9C8
%C9C9FD0DFF1A1B141B141B3DFD11FF9BB18EB18E8EB18E8E8EFD12FF8514
%1B1461FD14FF9AFC8CFC8CB5FD12FF94B18EB18EB18EB18EC5FD10FF8515
%141B141B141B85FD10FF958EB18E8EB18EB18EB1CBFD11FF3D1B141B3CFD
%14FFBC8CB4FCFC8CFD12FFB78EB28EB18EB28EB19BFD10FF61141B143D14
%1B148BFD10FF8EB18EB1FD068EFD12FF61141B143DFD14FF9AFC8CFC8CFC
%CAFD11FF8EB18EB18EB18EB18EC4FD10FF601B141B141B141584FD0FFFCA
%B7FD048EB18EB78EBDFD13FF611461AFFD15FFFD04FCC3FD12FFBE8EB28E
%B28EB28EB1CAFD10FFAF141B143D1A1B14FD11FFBDB18EB28E8E8E8DB1CA
%FD18FFCA9B9B9BA1A2FD0FFF9ABCC3FD13FFCAB28EB18EB18EB19BFD12FF
%8B1415141B14AFFD11FFCB8E8E8EB1B18EB7C4FD17FFA2958E8E698E698E
%94CBFD24FFCBB78EB18EB19BFD14FFAF616160FD14FFCB8EB18E95C4CAFD
%17FFA18E698E698E698E698E69C4FD25FFCA9BC4CAFD27FFAF853C613C85
%AFFF9BBDFD11FF61613C678BFFFFFFA28E69948E946A948E946A948DCAFD
%11FFCFC9CAFD23FFCAC3C9CAFD13FFAF3D141B141B143D8BFD11FF8B141B
%141B141B60FFCA94698E6994698E6994698E698E6AFD0FFFC9C1BAC0BAC1
%C9FD14FFAF606160FD07FFCABC8CFC8CFCBBFD11FF841B141B141B141B14
%1B85FD10FF141B143D141B141B8BC469948E946A948E946A948E946A8EA1
%FFFFFFAF8585FD07FFCAC0BAC0BAC1BAC0C9FD06FFAF606161FD08FF6114
%1B141B3CFD06FFB58CFCFCFC8CFCB5FD08FFCFCAFD06FF3D143D141B143D
%141B143DFD07FF84FD07FF3C1B141B141B141B143D708E698E698E698E69
%8E698E698E699BFFFF84150E1436FD06FFC1BAC0BAC0BAC0BAC1CAFD04FF
%AF1414141B36FD06FF8B141B141B141436FD04FFC38CFC8CFC8CFC8CFCC3
%FD05FFCAC1BAC0C2FD04FFAF141B141B141B141B141B148BFD05FF3C1B61
%FD06FF3D143D143D1A3D143D14948D948E946A948E946A948E946A9494FF
%FF3D1437141585FD05FFBAC1BAC1BAC1BAC1BACFFD04FF611B143D1A1B85
%FD05FF611B143D1A3D143DAFFFFFFFBCFC8CB4FCFC8CB4FCBCFD05FFC9BA
%C0BAC1CFFFFFFF851B143D1A3D143D1A3D141B61FD04FFAF1B143DFD06FF
%141B141B141B141B143D6A8E6994698E6994698E6994698E6994FFFF1415
%14150E61FD04FFCAC0BAC0BAC0BAC0BABAC9FD04FF61141B141B1485FD05
%FF61141B141B141B14AFFFFFFFBC8CFC8CFC8CFC8CFC93FD05FFC1C0BAC0
%BACAFFFFFF85141B141B141B141B141B1461FD05FF613D85FD06FF3D143D
%141B143D141B14948E946A948E946A948E946A948E8E94FFFF610E151415
%85FD05FFC0C0BAC1BAC0BAC1BACFFD04FF611B141B141BAFFD05FF601B14
%1B143D143DAFFFFFFFBCFCFCFC8CB4FCFC8CC3FD05FFC9BAC0BAC1CFFFFF
%FF851B141B143D141B143D141B60FD0EFF6014141B141B141B143D948E69
%8E698E698E698E698E698E699BFFFFA9370E1560FD06FFC8BAC0BAC0BAC0
%BAC1FD06FF361B141B60FD06FFAF141B141B141B60FD04FFCA8CFC8CFC8C
%FC8CFCA7FD06FFC9BBC1CAFD04FFAF141B141B141B141B141B148BFD0FFF
%3C1B143D143D141BAFCA69946A948E946A948E946A948E8EA2FD05FFAFFD
%08FFC1BAC1BAC0BAC1CFFD07FF858BA9FD08FFAF1B1B143D61FD06FFC3FC
%FC8CFCFCFCBCFD10FF67143D143D1A3D143D143DFD11FF3C1B1415143D85
%FFFF95698E6994698E6994698E698E94FD0FFFCFC8BAC1BAC2CAFD15FF85
%8BA9FD08FFC393FC8CB5C3FD11FFAF3D141B141B141B143DAFFD12FFA98B
%61AFFD04FFCB956A946A948E946A948E8E8EFD0BFFCFCFCECFFD04FFCAFD
%2AFFCA9BC4A1CBFD0DFF61141B141B1461AFFFFFAFFD17FFCACEA194698E
%698E698E698E70CBFD0AFFC8C6A4C6C6C7CAFD13FFA1BC8CB59AFD13FFA8
%9B8E8E6A948E9BA8FD0CFFAF848560AFFD04FF3736FD15FFC1C0C0C6C1C3
%94948E8E6A95A1FD0BFFC7FD06C6FECFFD11FFBCFCFCFC8CFCFCCAFD10FF
%CBBD8E9594B794958EBDFD12FFAF61FD0414AFFD12FFFD07C0CFA8CAA2CA
%FD0CFFC8FD08C6C7FD10FFC3FC8CFC8CFC8CFC8CFD10FF9B8E9494948E94
%94948EC4FD10FFA9150E1537141536FD11FFC9FD07C0C8FD10FFC7FD09C6
%CFFD0FFFB5FCFC8CB4FCFC8CFCC3FD0FFF9494949594959495949494FD10
%FF611415140E150E15A9FD10FFC8BAFD05C0BAC1FD0FFFCFC6C6A4C6C6C6
%A4C6C6C6A6FD0EFFCA8CFC8CFC8CFC8CFC8CBCFD0EFFA2948E948E948E94
%8E948E94A8FD0FFF1415141437141514FD11FFC7FD07C0C1FD0FFFCFC6C6
%FEC6C6C6FEC6C6C6CEFD0EFFCAB5FCFC8CB4FCFC8CFCBCFD0EFFCB949594
%B7949594B7949594FD10FF3714371414150E61FD11FFC9BAFD05C0BAC8FD
%10FFFD0AC6C9FD0FFF8CFC8CFC8CFC8CFC8CC3FD0EFFCA958E948E949494
%8E948E9BFD10FF36151415150E37AFFD11FFCFC7FD06C0CAFD10FFCEFD08
%C6C7FD10FFC38CFCFCFC8CB4FCB5CAFD0FFF9B949495949594959494A2FD
%11FF1415141461A8FD13FFCAC7C0C0BAC1C9FD12FFC7C6C6A4C6C6C6A4CF
%FD11FFBC8CFC8CFC8CFCC3FD11FF94948E948E948E8E94FD12FFAF3637FD
%18FFCFC9CFFD15FFCEFD04C6C7FD14FFCAB5B5B5C2CAFD13FF95948E948E
%949BFD34FF848560A9FD10FFC9CFCFFD2FFFA2C39BC4A8FD28FFC9C8C2C9
%FD07FFAF36150E15143DA9FD2DFFCFCEC9CFFD23FFCFC9CFFD09FFC9CCC7
%CDCAFD07FFC1C0BAC0BAC1CAFD04FFAF0E1514140E150E15A8FD07FFCAFD
%0BFFA8CAA8FD15FFC8C0BAC0BAC8FD15FF853661A9FD07FFCAC1BAC0BAC1
%C9FD06FFCEFEC6FEC6CCCFFD05FFC8FD06C0C7FD04FF3615143714371437
%1461FD06FFC7CCC6CEFD08FFA1948E8E9BFD13FFC9FD06C0C8FD08FFC3C4
%FD09FF610E15141585FD06FFC7FD05C0C7CFFD04FFCFC7C6CCC6C6C6CDFD
%04FFCFFD08C0C9FFFFAF150E1514151415141514FD05FFC7C6C6FEC6CEFD
%06FFCA8E698E698EA2FD08FFCB9BCBFD07FFC7BAFD06C0CFFD06FF948E8D
%B7FD07FF850E1514150E37FD05FFCEFD06C0BAC9FD05FFC6FEC6CCC6FEC7
%FD05FFFD08C0C8FFFFFF14151437141514371415A9FFFFFFCFCCC6CCC6FE
%C8FD06FFC469946A9469C4FD08FF948EBDFD07FFC1FD07C0C9FD05FFCAB1
%8EB18EFD07FF60151415141514AFFD04FFC8FD07C0C2FD04FFCAFD06C6C7
%FD04FFCAFD07C0BAC9FFFFA81514140E1514140E1514AFFD04FFFD05C6CE
%FD06FFA28E698E698EA1FD08FFC48ECAFD07FFC1FD06C0BACFFD06FF8E8E
%8D8EA8FD06FF850E1514140E15A9FD04FFC9BAFD05C0BAC8FD05FFCDFEC6
%CCC6FECEFD05FFC1FD07C0CFFFFFFF36151437143714371461FD05FFCFC6
%FEC6CDFD08FF9B8E698E94FD13FFC9FD06C0C7FD07FFCB95BDCAFD07FFAF
%3D1415141561FD05FFCFC1FD06C0CFFFFFC1C8C9FFC8C6C6CCC8FD07FFFD
%06C0C9FD04FFAF0E15141514150E1585FD06FFCFC8CECFFD09FFA19B9BFD
%15FFC1C0BAC0BAC0CAFD13FFA961143760FD07FFC9C0BAC0BAC0C8CAC2C2
%C0BAC0BBCAFFCFCFFD09FFC8C1C0C8C9FD06FF8514151415141585FD2DFF
%C9C8C1C9CFFD21FFCAC8C1C8C1C1BAC0BABAC0BABABAC9FD0CFFCFFD0AFF
%AF5A373661A9FD57FFC2BABAC0BAC0C1BAC1BAC1BAC9FD72FFC9C0BAC1BA
%C1BABAC0BAC0BAC0BACFFD2AFFA9AFFD17FFCAA1CAFD2AFFCAC0BAC0BAC0
%BAC0C0BAC1BAC0BAC0C2FD29FF5A37143785FD14FFC38C8C8CB5CAFD14FF
%CA949494CBFD0FFFC8BAC1BAC0BAC1BABAC0BAC0BAC0BAC1FD10FFCABEA2
%FD15FF36140E150E14A8FD12FFC3FD068CCAFD12FFCA698E698E69CBFD0E
%FFC1BABAC0BAC0BAC0C1BAC1BAC1BAC1C0FD0FFFCBB78EB2CAFD13FFAF15
%143714371485FD12FF93FC8CFC8CB48CC3FD12FF948E6A948E8E9BFD0EFF
%C1BAC1BAC1BAC1BABAC0BAC0BAC0BAC1CAFD0EFFCA8EB18DC4FD13FFAF14
%151415141436FD12FF93FD068C9AFD12FF94698E6994699BFD0DFFCFBAC0
%BAC0BAC0BAC0C1BAC0BAC1BAC0BAFD10FFBD8EB7CAFD13FFAF3714151437
%1485FD12FF938C8CFC8C8C8CCAFD12FF9B8E8E94698EA1FD0DFFCFC1BAC0
%BAC1BAC0BABAC0BAC0BAC0BAC1FD11FFCBCBFD15FF60150E140E37AFFD12
%FFCAFD058C93FD13FFCB6A8E698D70FD0FFFC1BABAC0BAC0BAC0C1BAC1BA
%C1BAC0C9FD29FF85613685FD15FFCA93B58CBCFD16FFA19BA1FD10FFC9BA
%C1BAC1BAC1BABAC0BAC0BAC0C1FD45FFCAFD2BFFCFC1BAC0BAC0BAC0C0BA
%C1BAC0BAC9CFFD17FFCFCFCFFD17FFAFFD25FFCACAFD18FFCAC0BAC0BAC1
%BABAC0BAC0BAFD04C0CFFD12FFCFCDFD04C6C8FD13FFA985361B1461A9FD
%20FFBC8CFC8CB49AFD09FFA9AFFD0CFFC9C1BABABAC0C0BAC1FD07C0CFFD
%11FFCCC6CCC6CCC6FEC7FD11FFAF3D141B141B143DAFFD1EFFBC8CFCFCFC
%8CFCB5FD06FF8B1B1B1461AFFD07FFAD815C8882C8BAC0BAC9C8BAFD08C0
%FD07FFA2CAFD07FFCDC6C6C6FEFD04C6C8FD07FFCFFD08FF61141B141B14
%1B143DAFFD06FF8B60AFFD13FFC28CFC8CFC8CFC8CFCBCFD04FF85141B14
%1B141BA9FD05FF825C325C325C82FFC9C9FFC8FD09C0C9FD05FFBDB18EB7
%FD06FFC6CCC6CCC6CCC6CCC6CCCFFD05FF825C5DCFFD05FFAF141B143D14
%1B143D14AFFD05FF8B141B14AFFD08FFCA946AC4FD06FF8CFCFCFC8CB4FC
%FC8CB5FD04FF141B143D141B1461FD04FFAEFD075CAEFFFFCFC1FD08C0BA
%C8FD04FFA88E8E8E8DC4FD04FFC9FD0AC6CFFD04FFA85C325C5DFD05FF84
%1B141B141B141B141B60FD05FF141B141536FD08FF95698E69CBFD04FFCA
%FC8CFC8CFC8CFC8CFC8CCAFFFF841B141B141B141B14FD04FFAD325C325C
%565C32ADFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-02-24T15:03:36+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2015-02-24T15:03:36+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-02-24T15:03:36+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7H+Y+kzR6gmpIpaCdQkj&#xA;D9l12FfmvTOB9qtFKOUZh9MhR8iP1h6rsLUgwOM/UPuYdnJO+TryhpM+oa3blVPoW7rNO/YBDUCv&#xA;+URTNx2HopZ9TGh6YESJ9363X9p6kYsJvnIUHruepvDvJvzH/IseZ9fk1vTdQWzuLkL9chmQuhZF&#xA;CB0KnaqqKinvl+PNQp6zsj2m/LYhinHiEeVM38g+S7Pyf5di0i2lNw/Nprm4I4+pM4AZuIJoKKAB&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:1ad1a945-c58b-a24c-929b-7228da59c457</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:1ad1a945-c58b-a24c-929b-7228da59c457</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:fa2212c1-2bca-0f46-834b-48c331eff914</stRef:instanceID>
            <stRef:documentID>xmp.did:fa2212c1-2bca-0f46-834b-48c331eff914</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fa2212c1-2bca-0f46-834b-48c331eff914</stEvt:instanceID>
                  <stEvt:when>2015-02-24T13:35:04+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1ad1a945-c58b-a24c-929b-7228da59c457</stEvt:instanceID>
                  <stEvt:when>2015-02-24T15:03:36+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
gsave
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
cp
clp
100 30.2971 mo
104.062 30.2971 107.815 32.4641 109.846 35.9819 cv
111.877 39.4996 111.877 43.8337 109.846 47.3515 cv
107.815 50.8692 104.062 53.0362 100 53.0362 cv
95.938 53.0362 92.1846 50.8692 90.1537 47.3515 cv
88.1227 43.8337 88.1227 39.4996 90.1537 35.9819 cv
92.1846 32.4641 95.938 30.2971 100 30.2971 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 .498039 .0431373 rgb
f
24.9375 69.4858 mo
29.8847 69.4858 34.4562 72.1252 36.9298 76.4096 cv
39.4034 80.694 39.4034 85.9727 36.9298 90.2571 cv
34.4562 94.5415 29.8847 97.1808 24.9375 97.1808 cv
19.9903 97.1808 15.4188 94.5415 12.9452 90.2571 cv
10.4716 85.9727 10.4716 80.694 12.9452 76.4096 cv
15.4188 72.1252 19.9903 69.4858 24.9375 69.4858 cv
cp
f
74.9375 69.8468 mo
79.7558 69.8468 84.208 72.4174 86.6171 76.5901 cv
89.0263 80.7628 89.0263 85.9038 86.6171 90.0766 cv
84.208 94.2493 79.7558 96.8198 74.9375 96.8198 cv
70.1192 96.8198 65.667 94.2493 63.2578 90.0766 cv
60.8487 85.9038 60.8487 80.7628 63.2578 76.5901 cv
65.667 72.4174 70.1192 69.8468 74.9375 69.8468 cv
cp
.807843 .164706 .447059 rgb
f
124.938 78.6615 mo
126.607 78.6615 128.149 79.552 128.983 80.9974 cv
129.818 82.4429 129.818 84.2238 128.983 85.6692 cv
128.149 87.1147 126.607 88.0051 124.938 88.0051 cv
123.268 88.0051 121.726 87.1147 120.892 85.6692 cv
120.057 84.2238 120.057 82.4429 120.892 80.9974 cv
121.726 79.552 123.268 78.6615 124.938 78.6615 cv
cp
.529412 .882353 0 rgb
f
174.938 59.4422 mo
183.473 59.4422 191.36 63.9958 195.628 71.3877 cv
199.896 78.7797 199.896 87.887 195.628 95.2789 cv
191.36 102.671 183.473 107.225 174.938 107.225 cv
166.402 107.225 158.515 102.671 154.247 95.2789 cv
149.979 87.887 149.979 78.7797 154.247 71.3877 cv
158.515 63.9958 166.402 59.4422 174.938 59.4422 cv
cp
.862745 .00392157 .415686 rgb
f
224.938 76.3211 mo
227.443 76.3211 229.758 77.6576 231.01 79.8272 cv
232.263 81.9968 232.263 84.6698 231.01 86.8394 cv
229.758 89.009 227.443 90.3455 224.938 90.3455 cv
222.432 90.3455 220.117 89.009 218.865 86.8394 cv
217.612 84.6698 217.612 81.9968 218.865 79.8272 cv
220.117 77.6576 222.432 76.3211 224.938 76.3211 cv
cp
1 .498039 .0431373 rgb
f
274.938 54.3497 mo
285.292 54.3497 294.861 59.874 300.038 68.8415 cv
305.215 77.8091 305.215 88.8576 300.038 97.8251 cv
294.861 106.793 285.292 112.317 274.938 112.317 cv
264.583 112.317 255.014 106.793 249.837 97.8251 cv
244.66 88.8576 244.66 77.8091 249.837 68.8415 cv
255.014 59.874 264.583 54.3497 274.938 54.3497 cv
cp
.996078 .596078 0 rgb
f
324.938 68.1619 mo
330.358 68.1619 335.366 71.0536 338.076 75.7476 cv
340.786 80.4417 340.786 86.225 338.076 90.919 cv
335.366 95.6131 330.358 98.5048 324.938 98.5048 cv
319.517 98.5048 314.509 95.6131 311.799 90.919 cv
309.089 86.225 309.089 80.4417 311.799 75.7476 cv
314.509 71.0536 319.517 68.1619 324.938 68.1619 cv
cp
.988235 .807843 0 rgb
f
374.938 75.0146 mo
377.909 75.0146 380.656 76.6002 382.142 79.174 cv
383.628 81.7478 383.628 84.9189 382.142 87.4927 cv
380.656 90.0665 377.909 91.652 374.938 91.652 cv
371.966 91.652 369.219 90.0665 367.733 87.4927 cv
366.247 84.9189 366.247 81.7478 367.733 79.174 cv
369.219 76.6002 371.966 75.0146 374.938 75.0146 cv
cp
.0313726 .580392 .890196 rgb
f
424.938 71.3191 mo
429.23 71.3191 433.196 73.609 435.342 77.3262 cv
437.488 81.0434 437.488 85.6232 435.342 89.3404 cv
433.196 93.0576 429.23 95.3475 424.938 95.3475 cv
420.645 95.3475 416.679 93.0576 414.533 89.3404 cv
412.387 85.6232 412.387 81.0434 414.533 77.3262 cv
416.679 73.609 420.645 71.3191 424.938 71.3191 cv
cp
.996078 .596078 0 rgb
f
474.938 76.977 mo
477.208 76.977 479.307 78.1885 480.442 80.1552 cv
481.578 82.1218 481.578 84.5448 480.442 86.5115 cv
479.307 88.4782 477.208 89.6897 474.938 89.6897 cv
472.667 89.6897 470.568 88.4782 469.433 86.5115 cv
468.297 84.5448 468.297 82.1218 469.433 80.1552 cv
470.568 78.1885 472.667 76.977 474.938 76.977 cv
cp
.733333 .054902 .352941 rgb
f
24.9375 156.569 mo
28.545 156.569 31.8784 158.494 33.6822 161.618 cv
35.4859 164.742 35.4859 168.591 33.6822 171.715 cv
31.8784 174.84 28.545 176.764 24.9375 176.764 cv
21.33 176.764 17.9966 174.84 16.1928 171.715 cv
14.3891 168.591 14.3891 164.742 16.1928 161.618 cv
17.9966 158.494 21.33 156.569 24.9375 156.569 cv
cp
1 .498039 .0431373 rgb
f
74.9375 159.861 mo
77.3688 159.861 79.6153 161.159 80.831 163.264 cv
82.0466 165.37 82.0466 167.964 80.831 170.069 cv
79.6153 172.175 77.3688 173.472 74.9375 173.472 cv
72.5062 173.472 70.2597 172.175 69.044 170.069 cv
67.8284 167.964 67.8284 165.37 69.044 163.264 cv
70.2597 161.159 72.5062 159.861 74.9375 159.861 cv
cp
f
124.938 154.826 mo
129.168 154.826 133.077 157.083 135.192 160.746 cv
137.307 164.41 137.307 168.923 135.192 172.587 cv
133.077 176.25 129.168 178.507 124.938 178.507 cv
120.707 178.507 116.799 176.25 114.683 172.587 cv
112.568 168.923 112.568 164.41 114.683 160.746 cv
116.799 157.083 120.707 154.826 124.938 154.826 cv
cp
1 .862745 .0509804 rgb
f
174.938 150.361 mo
180.763 150.361 186.146 153.469 189.058 158.514 cv
191.971 163.559 191.971 169.774 189.058 174.819 cv
186.146 179.864 180.763 182.972 174.938 182.972 cv
169.112 182.972 163.729 179.864 160.817 174.819 cv
157.904 169.774 157.904 163.559 160.817 158.514 cv
163.729 153.469 169.112 150.361 174.938 150.361 cv
cp
f
224.938 158.303 mo
227.926 158.303 230.687 159.897 232.181 162.485 cv
233.675 165.073 233.675 168.261 232.181 170.849 cv
230.687 173.436 227.926 175.031 224.938 175.031 cv
221.949 175.031 219.188 173.436 217.694 170.849 cv
216.2 168.261 216.2 165.073 217.694 162.485 cv
219.188 159.897 221.949 158.303 224.938 158.303 cv
cp
.733333 .054902 .352941 rgb
f
274.938 139.372 mo
284.689 139.372 293.7 144.575 298.575 153.019 cv
303.451 161.464 303.451 171.869 298.575 180.314 cv
293.7 188.759 284.689 193.961 274.938 193.961 cv
265.186 193.961 256.176 188.759 251.3 180.314 cv
246.424 171.869 246.424 161.464 251.3 153.019 cv
256.176 144.575 265.186 139.372 274.938 139.372 cv
cp
.929412 .0235294 0 rgb
f
324.938 146.199 mo
332.25 146.199 339.007 150.1 342.663 156.433 cv
346.319 162.766 346.319 170.568 342.663 176.9 cv
339.007 183.233 332.25 187.134 324.938 187.134 cv
317.625 187.134 310.868 183.233 307.212 176.9 cv
303.556 170.568 303.556 162.766 307.212 156.433 cv
310.868 150.1 317.625 146.199 324.938 146.199 cv
cp
.835294 .00784314 0 rgb
f
374.938 161.202 mo
376.89 161.202 378.694 162.244 379.67 163.934 cv
380.646 165.625 380.646 167.708 379.67 169.399 cv
378.694 171.09 376.89 172.131 374.938 172.131 cv
372.985 172.131 371.181 171.09 370.205 169.399 cv
369.229 167.708 369.229 165.625 370.205 163.934 cv
371.181 162.244 372.985 161.202 374.938 161.202 cv
cp
.392157 .768627 0 rgb
f
424.938 154.241 mo
429.377 154.241 433.479 156.61 435.698 160.454 cv
437.918 164.298 437.918 169.035 435.698 172.879 cv
433.479 176.724 429.377 179.092 424.938 179.092 cv
420.498 179.092 416.396 176.724 414.177 172.879 cv
411.957 169.035 411.957 164.298 414.177 160.454 cv
416.396 156.61 420.498 154.241 424.938 154.241 cv
cp
f
474.938 157.334 mo
478.272 157.334 481.353 159.113 483.02 162 cv
484.687 164.888 484.687 168.446 483.02 171.333 cv
481.353 174.221 478.272 176 474.938 176 cv
471.603 176 468.522 174.221 466.855 171.333 cv
465.188 168.446 465.188 164.888 466.855 162 cv
468.522 159.113 471.603 157.334 474.938 157.334 cv
cp
.529412 .882353 0 rgb
f
24.9375 239.77 mo
28.5923 239.77 31.9695 241.72 33.7969 244.885 cv
35.6244 248.05 35.6244 251.95 33.7969 255.115 cv
31.9695 258.28 28.5923 260.23 24.9375 260.23 cv
21.2827 260.23 17.9055 258.28 16.0781 255.115 cv
14.2506 251.95 14.2506 248.05 16.0781 244.885 cv
17.9055 241.72 21.2827 239.77 24.9375 239.77 cv
cp
.733333 .054902 .352941 rgb
f
74.9375 240.712 mo
78.2558 240.712 81.322 242.482 82.9811 245.356 cv
84.6402 248.23 84.6402 251.77 82.9811 254.644 cv
81.322 257.518 78.2558 259.288 74.9375 259.288 cv
71.6193 259.288 68.5531 257.518 66.8939 254.644 cv
65.2348 251.77 65.2348 248.23 66.8939 245.356 cv
68.5531 242.482 71.6193 240.712 74.9375 240.712 cv
cp
.0313726 .713726 .901961 rgb
f
124.938 230.787 mo
131.801 230.787 138.144 234.449 141.576 240.394 cv
145.008 246.338 145.008 253.662 141.576 259.606 cv
138.144 265.551 131.801 269.212 124.938 269.212 cv
118.074 269.212 111.731 265.551 108.299 259.606 cv
104.867 253.662 104.867 246.338 108.299 240.394 cv
111.731 234.449 118.074 230.787 124.938 230.787 cv
cp
.835294 .00784314 0 rgb
f
174.938 229.794 mo
182.156 229.794 188.827 233.645 192.436 239.897 cv
196.046 246.149 196.046 253.851 192.436 260.103 cv
188.827 266.355 182.156 270.206 174.938 270.206 cv
167.719 270.206 161.048 266.355 157.439 260.103 cv
153.829 253.851 153.829 246.149 157.439 239.897 cv
161.048 233.645 167.719 229.794 174.938 229.794 cv
cp
1 .862745 .0509804 rgb
f
224.938 234.706 mo
230.401 234.706 235.45 237.621 238.182 242.353 cv
240.914 247.085 240.914 252.915 238.182 257.647 cv
235.45 262.379 230.401 265.294 224.938 265.294 cv
219.474 265.294 214.425 262.379 211.693 257.647 cv
208.961 252.915 208.961 247.085 211.693 242.353 cv
214.425 237.621 219.474 234.706 224.938 234.706 cv
cp
.392157 .768627 0 rgb
f
274.938 241.07 mo
278.128 241.07 281.076 242.772 282.671 245.535 cv
284.267 248.298 284.267 251.702 282.671 254.465 cv
281.076 257.228 278.128 258.93 274.938 258.93 cv
271.747 258.93 268.799 257.228 267.204 254.465 cv
265.608 251.702 265.608 248.298 267.204 245.535 cv
268.799 242.772 271.747 241.07 274.938 241.07 cv
cp
.835294 .00784314 0 rgb
f
324.938 216.705 mo
336.833 216.705 347.824 223.051 353.772 233.353 cv
359.719 243.654 359.719 256.346 353.772 266.647 cv
347.824 276.949 336.833 283.295 324.938 283.295 cv
313.042 283.295 302.051 276.949 296.103 266.647 cv
290.156 256.346 290.156 243.654 296.103 233.353 cv
302.051 223.051 313.042 216.705 324.938 216.705 cv
cp
.996078 .596078 0 rgb
f
374.938 234.945 mo
380.316 234.945 385.286 237.815 387.975 242.473 cv
390.665 247.131 390.665 252.869 387.975 257.527 cv
385.286 262.185 380.316 265.055 374.938 265.055 cv
369.559 265.055 364.589 262.185 361.9 257.527 cv
359.21 252.869 359.21 247.131 361.9 242.473 cv
364.589 237.815 369.559 234.945 374.938 234.945 cv
cp
.529412 .882353 0 rgb
f
424.938 223.401 mo
434.44 223.401 443.221 228.471 447.973 236.7 cv
452.724 244.93 452.724 255.07 447.973 263.3 cv
443.221 271.529 434.44 276.599 424.938 276.599 cv
415.435 276.599 406.654 271.529 401.902 263.3 cv
397.151 255.07 397.151 244.93 401.902 236.7 cv
406.654 228.471 415.435 223.401 424.938 223.401 cv
cp
1 .498039 .0431373 rgb
f
474.938 235.35 mo
480.172 235.35 485.008 238.142 487.625 242.675 cv
490.242 247.208 490.242 252.792 487.625 257.325 cv
485.008 261.858 480.172 264.65 474.938 264.65 cv
469.703 264.65 464.867 261.858 462.25 257.325 cv
459.633 252.792 459.633 247.208 462.25 242.675 cv
464.867 238.142 469.703 235.35 474.938 235.35 cv
cp
.988235 .807843 0 rgb
f
24.9375 327.449 mo
27.0399 327.449 28.9826 328.57 30.0338 330.391 cv
31.085 332.212 31.085 334.455 30.0338 336.276 cv
28.9826 338.096 27.0399 339.218 24.9375 339.218 cv
22.8351 339.218 20.8924 338.096 19.8412 336.276 cv
18.79 334.455 18.79 332.212 19.8412 330.391 cv
20.8924 328.57 22.8351 327.449 24.9375 327.449 cv
cp
.0313726 .713726 .901961 rgb
f
74.9375 313.421 mo
82.0514 313.421 88.6249 317.217 92.1818 323.377 cv
95.7387 329.538 95.7387 337.129 92.1818 343.289 cv
88.6249 349.45 82.0514 353.245 74.9375 353.245 cv
67.8236 353.245 61.2502 349.45 57.6932 343.289 cv
54.1363 337.129 54.1363 329.538 57.6932 323.377 cv
61.2502 317.217 67.8236 313.421 74.9375 313.421 cv
cp
f
124.938 302.473 mo
135.963 302.473 146.151 308.355 151.664 317.903 cv
157.176 327.451 157.176 339.215 151.664 348.764 cv
146.151 358.312 135.963 364.194 124.938 364.194 cv
113.912 364.194 103.724 358.312 98.2114 348.764 cv
92.6986 339.215 92.6986 327.451 98.2114 317.903 cv
103.724 308.355 113.912 302.473 124.938 302.473 cv
cp
.733333 .054902 .352941 rgb
f
174.938 322.687 mo
178.741 322.687 182.256 324.716 184.158 328.01 cv
186.059 331.304 186.059 335.363 184.158 338.656 cv
182.256 341.951 178.741 343.98 174.938 343.98 cv
171.134 343.98 167.619 341.951 165.717 338.656 cv
163.816 335.363 163.816 331.304 165.717 328.01 cv
167.619 324.716 171.134 322.687 174.938 322.687 cv
cp
.0313726 .580392 .890196 rgb
f
224.938 315.084 mo
231.457 315.084 237.482 318.563 240.742 324.209 cv
244.001 329.855 244.001 336.812 240.742 342.458 cv
237.482 348.104 231.457 351.582 224.938 351.582 cv
218.418 351.582 212.393 348.104 209.133 342.458 cv
205.874 336.812 205.874 329.855 209.133 324.209 cv
212.393 318.563 218.418 315.084 224.938 315.084 cv
cp
1 .498039 .0431373 rgb
f
274.938 321.483 mo
279.171 321.483 283.083 323.742 285.2 327.408 cv
287.317 331.075 287.317 335.592 285.2 339.258 cv
283.083 342.925 279.171 345.184 274.938 345.184 cv
270.704 345.184 266.792 342.925 264.675 339.258 cv
262.558 335.592 262.558 331.075 264.675 327.408 cv
266.792 323.742 270.704 321.483 274.938 321.483 cv
cp
.0313726 .713726 .901961 rgb
f
324.938 317.99 mo
330.419 317.99 335.484 320.915 338.225 325.662 cv
340.966 330.409 340.966 336.258 338.225 341.005 cv
335.484 345.752 330.419 348.676 324.938 348.676 cv
319.456 348.676 314.391 345.752 311.65 341.005 cv
308.909 336.258 308.909 330.409 311.65 325.662 cv
314.391 320.915 319.456 317.99 324.938 317.99 cv
cp
f
374.938 315.157 mo
381.431 315.157 387.432 318.622 390.678 324.245 cv
393.925 329.869 393.925 336.798 390.678 342.421 cv
387.432 348.045 381.431 351.509 374.938 351.509 cv
368.444 351.509 362.443 348.045 359.197 342.421 cv
355.95 336.798 355.95 329.869 359.197 324.245 cv
362.443 318.622 368.444 315.157 374.938 315.157 cv
cp
.929412 .0235294 0 rgb
f
424.938 323.787 mo
428.348 323.787 431.499 325.607 433.205 328.56 cv
434.91 331.514 434.91 335.153 433.205 338.106 cv
431.499 341.06 428.348 342.879 424.938 342.879 cv
421.527 342.879 418.376 341.06 416.67 338.106 cv
414.965 335.153 414.965 331.514 416.67 328.56 cv
418.376 325.607 421.527 323.787 424.938 323.787 cv
cp
1 .498039 .0431373 rgb
f
474.938 309.66 mo
483.395 309.66 491.21 314.172 495.439 321.497 cv
499.668 328.821 499.668 337.845 495.439 345.17 cv
491.21 352.494 483.395 357.006 474.938 357.006 cv
466.48 357.006 458.665 352.494 454.436 345.17 cv
450.207 337.845 450.207 328.821 454.436 321.497 cv
458.665 314.172 466.48 309.66 474.938 309.66 cv
cp
.0313726 .713726 .901961 rgb
f
24.9375 403.077 mo
29.7927 403.077 34.2791 405.667 36.7067 409.872 cv
39.1343 414.076 39.1343 419.257 36.7067 423.462 cv
34.2791 427.666 29.7927 430.257 24.9375 430.257 cv
20.0823 430.257 15.5959 427.666 13.1683 423.462 cv
10.7407 419.257 10.7407 414.076 13.1683 409.872 cv
15.5959 405.667 20.0823 403.077 24.9375 403.077 cv
cp
1 .862745 .0509804 rgb
f
74.9375 400.1 mo
80.8561 400.1 86.3252 403.258 89.2845 408.383 cv
92.2438 413.509 92.2438 419.824 89.2845 424.95 cv
86.3252 430.076 80.8561 433.233 74.9375 433.233 cv
69.0189 433.233 63.5498 430.076 60.5905 424.95 cv
57.6312 419.824 57.6312 413.509 60.5905 408.383 cv
63.5498 403.258 69.0189 400.1 74.9375 400.1 cv
cp
.996078 .596078 0 rgb
f
124.938 396.822 mo
132.027 396.822 138.579 400.604 142.124 406.744 cv
145.669 412.884 145.669 420.449 142.124 426.589 cv
138.579 432.729 132.027 436.512 124.938 436.512 cv
117.848 436.512 111.296 432.729 107.751 426.589 cv
104.206 420.449 104.206 412.884 107.751 406.744 cv
111.296 400.604 117.848 396.822 124.938 396.822 cv
cp
.0313726 .580392 .890196 rgb
f
174.938 405.815 mo
178.815 405.815 182.397 407.883 184.336 411.241 cv
186.274 414.598 186.274 418.735 184.336 422.093 cv
182.397 425.45 178.815 427.519 174.938 427.519 cv
171.06 427.519 167.478 425.45 165.539 422.093 cv
163.601 418.735 163.601 414.598 165.539 411.241 cv
167.478 407.883 171.06 405.815 174.938 405.815 cv
cp
1 .862745 .0509804 rgb
f
224.938 405.438 mo
228.949 405.438 232.656 407.578 234.662 411.052 cv
236.668 414.526 236.668 418.807 234.662 422.281 cv
232.656 425.755 228.949 427.895 224.938 427.895 cv
220.926 427.895 217.219 425.755 215.213 422.281 cv
213.207 418.807 213.207 414.526 215.213 411.052 cv
217.219 407.578 220.926 405.438 224.938 405.438 cv
cp
.733333 .054902 .352941 rgb
f
274.938 411.736 mo
276.699 411.736 278.327 412.675 279.208 414.201 cv
280.089 415.727 280.089 417.607 279.208 419.132 cv
278.327 420.658 276.699 421.598 274.938 421.598 cv
273.176 421.598 271.548 420.658 270.667 419.132 cv
269.786 417.607 269.786 415.727 270.667 414.201 cv
271.548 412.675 273.176 411.736 274.938 411.736 cv
cp
.862745 .00392157 .415686 rgb
f
324.938 400.95 mo
330.553 400.95 335.741 403.945 338.549 408.808 cv
341.356 413.671 341.356 419.662 338.549 424.525 cv
335.741 429.388 330.553 432.384 324.938 432.384 cv
319.322 432.384 314.134 429.388 311.326 424.525 cv
308.519 419.662 308.519 413.671 311.326 408.808 cv
314.134 403.945 319.322 400.95 324.938 400.95 cv
cp
.996078 .596078 0 rgb
f
374.938 408.474 mo
377.864 408.474 380.569 410.036 382.032 412.57 cv
383.496 415.105 383.496 418.228 382.032 420.763 cv
380.569 423.298 377.864 424.859 374.938 424.859 cv
372.011 424.859 369.306 423.298 367.843 420.763 cv
366.379 418.228 366.379 415.105 367.843 412.57 cv
369.306 410.036 372.011 408.474 374.938 408.474 cv
cp
.862745 .00392157 .415686 rgb
f
424.938 403.892 mo
429.502 403.892 433.719 406.326 436.001 410.279 cv
438.283 414.232 438.283 419.102 436.001 423.054 cv
433.719 427.007 429.502 429.442 424.938 429.442 cv
420.373 429.442 416.156 427.007 413.874 423.054 cv
411.592 419.102 411.592 414.232 413.874 410.279 cv
416.156 406.326 420.373 403.892 424.938 403.892 cv
cp
.0313726 .580392 .890196 rgb
f
474.938 401.01 mo
480.531 401.01 485.699 403.994 488.496 408.839 cv
491.293 413.683 491.293 419.651 488.496 424.495 cv
485.699 429.339 480.531 432.323 474.938 432.323 cv
469.344 432.323 464.176 429.339 461.379 424.495 cv
458.582 419.651 458.582 413.683 461.379 408.839 cv
464.176 403.994 469.344 401.01 474.938 401.01 cv
cp
.996078 .596078 0 rgb
f
24.9375 479.669 mo
32.2011 479.669 38.913 483.544 42.5448 489.834 cv
46.1767 496.125 46.1767 503.875 42.5448 510.166 cv
38.913 516.456 32.2011 520.331 24.9375 520.331 cv
17.6739 520.331 10.962 516.456 7.33016 510.166 cv
3.69835 503.875 3.69835 496.125 7.33016 489.834 cv
10.962 483.544 17.6739 479.669 24.9375 479.669 cv
cp
f
74.9375 491.243 mo
78.0661 491.243 80.957 492.912 82.5213 495.621 cv
84.0856 498.331 84.0856 501.669 82.5213 504.379 cv
80.957 507.088 78.0661 508.757 74.9375 508.757 cv
71.8089 508.757 68.918 507.088 67.3537 504.379 cv
65.7894 501.669 65.7894 498.331 67.3537 495.621 cv
68.918 492.912 71.8089 491.243 74.9375 491.243 cv
cp
.862745 .00392157 .415686 rgb
f
124.938 479.689 mo
132.194 479.689 138.899 483.56 142.528 489.844 cv
146.156 496.129 146.156 503.871 142.528 510.156 cv
138.899 516.44 132.194 520.311 124.938 520.311 cv
117.681 520.311 110.976 516.44 107.347 510.156 cv
103.719 503.871 103.719 496.129 107.347 489.844 cv
110.976 483.56 117.681 479.689 124.938 479.689 cv
cp
1 .862745 .0509804 rgb
f
174.938 492.446 mo
177.636 492.446 180.13 493.886 181.479 496.223 cv
182.829 498.56 182.829 501.44 181.479 503.777 cv
180.13 506.114 177.636 507.554 174.938 507.554 cv
172.239 507.554 169.745 506.114 168.396 503.777 cv
167.046 501.44 167.046 498.56 168.396 496.223 cv
169.745 493.886 172.239 492.446 174.938 492.446 cv
cp
.392157 .768627 0 rgb
f
224.938 480.818 mo
231.791 480.818 238.123 484.474 241.55 490.409 cv
244.976 496.344 244.976 503.656 241.55 509.591 cv
238.123 515.526 231.791 519.182 224.938 519.182 cv
218.084 519.182 211.752 515.526 208.325 509.591 cv
204.899 503.656 204.899 496.344 208.325 490.409 cv
211.752 484.474 218.084 480.818 224.938 480.818 cv
cp
.0313726 .713726 .901961 rgb
f
274.938 490.504 mo
278.33 490.504 281.465 492.314 283.161 495.252 cv
284.858 498.19 284.858 501.81 283.161 504.748 cv
281.465 507.686 278.33 509.496 274.938 509.496 cv
271.545 509.496 268.41 507.686 266.714 504.748 cv
265.017 501.81 265.017 498.19 266.714 495.252 cv
268.41 492.314 271.545 490.504 274.938 490.504 cv
cp
f
324.938 492.343 mo
327.673 492.343 330.201 493.802 331.569 496.171 cv
332.937 498.54 332.937 501.459 331.569 503.829 cv
330.201 506.198 327.673 507.657 324.938 507.657 cv
322.202 507.657 319.674 506.198 318.306 503.829 cv
316.938 501.459 316.938 498.54 318.306 496.171 cv
319.674 493.802 322.202 492.343 324.938 492.343 cv
cp
.733333 .054902 .352941 rgb
f
374.938 480.095 mo
382.049 480.095 388.62 483.889 392.175 490.048 cv
395.731 496.206 395.731 503.794 392.175 509.952 cv
388.62 516.111 382.049 519.904 374.938 519.904 cv
367.826 519.904 361.255 516.111 357.7 509.952 cv
354.144 503.794 354.144 496.206 357.7 490.048 cv
361.255 483.889 367.826 480.095 374.938 480.095 cv
cp
.929412 .0235294 0 rgb
f
424.938 484.043 mo
430.638 484.043 435.906 487.084 438.757 492.021 cv
441.607 496.959 441.607 503.041 438.757 507.978 cv
435.906 512.916 430.638 515.957 424.938 515.957 cv
419.237 515.957 413.969 512.916 411.118 507.978 cv
408.268 503.041 408.268 496.959 411.118 492.021 cv
413.969 487.084 419.237 484.043 424.938 484.043 cv
cp
.0313726 .713726 .901961 rgb
f
474.938 484.767 mo
480.38 484.767 485.409 487.67 488.13 492.383 cv
490.851 497.096 490.851 502.903 488.13 507.617 cv
485.409 512.33 480.38 515.233 474.938 515.233 cv
469.495 515.233 464.466 512.33 461.745 507.617 cv
459.024 502.903 459.024 497.096 461.745 492.383 cv
464.466 487.67 469.495 484.767 474.938 484.767 cv
cp
.392157 .768627 0 rgb
f
24.9375 -20.3312 mo
32.2011 -20.3312 38.913 -16.4561 42.5448 -10.1656 cv
46.1767 -3.8751 46.1767 3.87511 42.5448 10.1656 cv
38.913 16.4561 32.2011 20.3312 24.9375 20.3312 cv
17.6739 20.3312 10.962 16.4561 7.33016 10.1656 cv
3.69835 3.87511 3.69835 -3.8751 7.33016 -10.1656 cv
10.962 -16.4561 17.6739 -20.3312 24.9375 -20.3312 cv
cp
.996078 .596078 0 rgb
f
74.9375 -8.75706 mo
78.0661 -8.75706 80.957 -7.08797 82.5213 -4.37853 cv
84.0856 -1.66908 84.0856 1.66909 82.5213 4.37853 cv
80.957 7.08798 78.0661 8.75706 74.9375 8.75706 cv
71.8089 8.75706 68.918 7.08798 67.3537 4.37853 cv
65.7894 1.66909 65.7894 -1.66908 67.3537 -4.37853 cv
68.918 -7.08797 71.8089 -8.75706 74.9375 -8.75706 cv
cp
.862745 .00392157 .415686 rgb
f
124.938 -20.3112 mo
132.194 -20.3112 138.899 -16.4399 142.528 -10.1556 cv
146.156 -3.87128 146.156 3.8713 142.528 10.1556 cv
138.899 16.4399 132.194 20.3112 124.938 20.3112 cv
117.681 20.3112 110.976 16.4399 107.347 10.1556 cv
103.719 3.8713 103.719 -3.87128 107.347 -10.1556 cv
110.976 -16.4399 117.681 -20.3112 124.938 -20.3112 cv
cp
1 .862745 .0509804 rgb
f
174.938 -7.5537 mo
177.636 -7.5537 180.13 -6.11397 181.479 -3.77685 cv
182.829 -1.43972 182.829 1.43973 181.479 3.77685 cv
180.13 6.11398 177.636 7.5537 174.938 7.5537 cv
172.239 7.5537 169.745 6.11398 168.396 3.77685 cv
167.046 1.43973 167.046 -1.43972 168.396 -3.77685 cv
169.745 -6.11397 172.239 -7.5537 174.938 -7.5537 cv
cp
.392157 .768627 0 rgb
f
224.938 -19.182 mo
231.791 -19.182 238.123 -15.5259 241.55 -9.59099 cv
244.976 -3.65606 244.976 3.65608 241.55 9.59101 cv
238.123 15.5259 231.791 19.182 224.938 19.182 cv
218.084 19.182 211.752 15.5259 208.325 9.59101 cv
204.899 3.65608 204.899 -3.65606 208.325 -9.59099 cv
211.752 -15.5259 218.084 -19.182 224.938 -19.182 cv
cp
.0313726 .713726 .901961 rgb
f
274.938 -9.4962 mo
278.33 -9.4962 281.465 -7.68623 283.161 -4.7481 cv
284.858 -1.80996 284.858 1.80997 283.161 4.7481 cv
281.465 7.68624 278.33 9.4962 274.938 9.4962 cv
271.545 9.4962 268.41 7.68624 266.714 4.7481 cv
265.017 1.80997 265.017 -1.80996 266.714 -4.7481 cv
268.41 -7.68623 271.545 -9.4962 274.938 -9.4962 cv
cp
f
324.938 -7.65744 mo
327.673 -7.65744 330.201 -6.19794 331.569 -3.82872 cv
332.937 -1.4595 332.937 1.4595 331.569 3.82872 cv
330.201 6.19794 327.673 7.65744 324.938 7.65744 cv
322.202 7.65744 319.674 6.19794 318.306 3.82872 cv
316.938 1.4595 316.938 -1.4595 318.306 -3.82872 cv
319.674 -6.19794 322.202 -7.65744 324.938 -7.65744 cv
cp
.733333 .054902 .352941 rgb
f
374.938 -19.9045 mo
382.049 -19.9045 388.62 -16.1107 392.175 -9.95224 cv
395.731 -3.79377 395.731 3.79379 392.175 9.95226 cv
388.62 16.1107 382.049 19.9045 374.938 19.9045 cv
367.826 19.9045 361.255 16.1107 357.7 9.95226 cv
354.144 3.79379 354.144 -3.79377 357.7 -9.95224 cv
361.255 -16.1107 367.826 -19.9045 374.938 -19.9045 cv
cp
.929412 .0235294 0 rgb
f
424.938 -15.957 mo
430.638 -15.957 435.906 -12.9156 438.757 -7.97847 cv
441.607 -3.04137 441.607 3.04139 438.757 7.97849 cv
435.906 12.9156 430.638 15.957 424.938 15.957 cv
419.237 15.957 413.969 12.9156 411.118 7.97849 cv
408.268 3.04139 408.268 -3.04137 411.118 -7.97847 cv
413.969 -12.9156 419.237 -15.957 424.938 -15.957 cv
cp
.0313726 .713726 .901961 rgb
f
474.938 -15.2334 mo
480.38 -15.2334 485.409 -12.3299 488.13 -7.61669 cv
490.851 -2.90346 490.851 2.90348 488.13 7.61671 cv
485.409 12.3299 480.38 15.2334 474.938 15.2334 cv
469.495 15.2334 464.466 12.3299 461.745 7.61671 cv
459.024 2.90348 459.024 -2.90346 461.745 -7.61669 cv
464.466 -12.3299 469.495 -15.2334 474.938 -15.2334 cv
cp
.392157 .768627 0 rgb
f
200 20.3777 mo
207.606 20.3777 214.634 24.4354 218.437 31.0222 cv
222.24 37.609 222.24 45.7243 218.437 52.3112 cv
214.634 58.898 207.606 62.9556 200 62.9556 cv
192.394 62.9556 185.366 58.898 181.563 52.3112 cv
177.76 45.7243 177.76 37.609 181.563 31.0222 cv
185.366 24.4354 192.394 20.3777 200 20.3777 cv
cp
.996078 .596078 0 rgb
f
300 36.8217 mo
301.731 36.8217 303.33 37.7451 304.196 39.2442 cv
305.061 40.7432 305.061 42.5901 304.196 44.0892 cv
303.33 45.5882 301.731 46.5117 300 46.5117 cv
298.269 46.5117 296.67 45.5882 295.804 44.0892 cv
294.939 42.5901 294.939 40.7432 295.804 39.2442 cv
296.67 37.7451 298.269 36.8217 300 36.8217 cv
cp
.898039 0 .439216 rgb
f
400 23.8652 mo
406.36 23.8652 412.237 27.2582 415.417 32.766 cv
418.596 38.2737 418.596 45.0596 415.417 50.5674 cv
412.237 56.0752 406.36 59.4681 400 59.4681 cv
393.64 59.4681 387.763 56.0752 384.583 50.5674 cv
381.404 45.0596 381.404 38.2737 384.583 32.766 cv
387.763 27.2582 393.64 23.8652 400 23.8652 cv
cp
1 .498039 .0431373 rgb
f
500 32.1033 mo
503.417 32.1033 506.574 33.926 508.282 36.885 cv
509.99 39.8439 509.99 43.4894 508.282 46.4484 cv
506.574 49.4073 503.417 51.2301 500 51.2301 cv
496.583 51.2301 493.426 49.4073 491.718 46.4484 cv
490.01 43.4894 490.01 39.8439 491.718 36.885 cv
493.426 33.926 496.583 32.1033 500 32.1033 cv
cp
.929412 .0235294 0 rgb
f
100 106.207 mo
106.714 106.207 112.918 109.789 116.275 115.604 cv
119.632 121.418 119.632 128.582 116.275 134.396 cv
112.918 140.211 106.714 143.793 100 143.793 cv
93.2859 143.793 87.0819 140.211 83.7249 134.396 cv
80.3678 128.582 80.3678 121.418 83.7249 115.604 cv
87.0819 109.789 93.2859 106.207 100 106.207 cv
cp
.862745 .00392157 .415686 rgb
f
200 109.496 mo
205.539 109.496 210.657 112.451 213.427 117.248 cv
216.196 122.045 216.196 127.955 213.427 132.752 cv
210.657 137.549 205.539 140.504 200 140.504 cv
194.461 140.504 189.343 137.549 186.573 132.752 cv
183.804 127.955 183.804 122.045 186.573 117.248 cv
189.343 112.451 194.461 109.496 200 109.496 cv
cp
.835294 .00784314 0 rgb
f
300 118.928 mo
302.169 118.928 304.174 120.086 305.258 121.964 cv
306.343 123.843 306.343 126.157 305.258 128.036 cv
304.174 129.914 302.169 131.072 300 131.072 cv
297.831 131.072 295.826 129.914 294.742 128.036 cv
293.657 126.157 293.657 123.843 294.742 121.964 cv
295.826 120.086 297.831 118.928 300 118.928 cv
cp
.0313726 .713726 .901961 rgb
f
400 111.738 mo
404.738 111.738 409.117 114.265 411.486 118.369 cv
413.855 122.472 413.855 127.528 411.486 131.631 cv
409.117 135.735 404.738 138.262 400 138.262 cv
395.262 138.262 390.883 135.735 388.514 131.631 cv
386.145 127.528 386.145 122.472 388.514 118.369 cv
390.883 114.265 395.262 111.738 400 111.738 cv
cp
1 .862745 .0509804 rgb
f
500 111.252 mo
504.912 111.252 509.45 113.873 511.906 118.126 cv
514.362 122.38 514.362 127.62 511.906 131.874 cv
509.45 136.127 504.912 138.748 500 138.748 cv
495.088 138.748 490.55 136.127 488.094 131.874 cv
485.638 127.62 485.638 122.38 488.094 118.126 cv
490.55 113.873 495.088 111.252 500 111.252 cv
cp
.988235 .807843 0 rgb
f
100 193.539 mo
105.286 193.539 110.17 196.359 112.812 200.936 cv
115.455 205.514 115.455 211.153 112.812 215.731 cv
110.17 220.308 105.286 223.128 100 223.128 cv
94.7145 223.128 89.8305 220.308 87.1877 215.731 cv
84.545 211.153 84.545 205.514 87.1877 200.936 cv
89.8305 196.359 94.7145 193.539 100 193.539 cv
cp
1 .498039 .0431373 rgb
f
0 200.494 mo
2.80064 200.494 5.38855 201.988 6.78887 204.414 cv
8.18919 206.839 8.18919 209.827 6.78887 212.253 cv
5.38855 214.678 2.80064 216.172 0 216.172 cv
-2.80064 216.172 -5.38855 214.678 -6.78887 212.253 cv
-8.18919 209.827 -8.18919 206.839 -6.78887 204.414 cv
-5.38855 201.988 -2.80064 200.494 0 200.494 cv
cp
.835294 .00784314 0 rgb
f
498.61 200.494 mo
501.411 200.494 503.999 201.988 505.399 204.414 cv
506.8 206.839 506.8 209.827 505.399 212.253 cv
503.999 214.678 501.411 216.172 498.61 216.172 cv
495.81 216.172 493.222 214.678 491.822 212.253 cv
490.421 209.827 490.421 206.839 491.822 204.414 cv
493.222 201.988 495.81 200.494 498.61 200.494 cv
cp
f
200 196.274 mo
204.308 196.274 208.289 198.573 210.443 202.304 cv
212.598 206.035 212.598 210.632 210.443 214.363 cv
208.289 218.094 204.308 220.392 200 220.392 cv
195.692 220.392 191.711 218.094 189.557 214.363 cv
187.402 210.632 187.402 206.035 189.557 202.304 cv
191.711 198.573 195.692 196.274 200 196.274 cv
cp
.862745 .00392157 .415686 rgb
f
300 188.916 mo
306.937 188.916 313.348 192.617 316.816 198.624 cv
320.285 204.632 320.285 212.034 316.816 218.042 cv
313.348 224.05 306.937 227.751 300 227.751 cv
293.063 227.751 286.652 224.05 283.184 218.042 cv
279.715 212.034 279.715 204.632 283.184 198.624 cv
286.652 192.617 293.063 188.916 300 188.916 cv
cp
.0313726 .580392 .890196 rgb
f
400 196.734 mo
404.144 196.734 407.973 198.945 410.046 202.534 cv
412.118 206.122 412.118 210.544 410.046 214.133 cv
407.973 217.722 404.144 219.933 400 219.933 cv
395.856 219.933 392.027 217.722 389.955 214.133 cv
387.883 210.544 387.883 206.122 389.955 202.534 cv
392.027 198.945 395.856 196.734 400 196.734 cv
cp
.807843 .164706 .447059 rgb
f
100 282.848 mo
103.151 282.848 106.062 284.529 107.637 287.257 cv
109.212 289.986 109.212 293.347 107.637 296.076 cv
106.062 298.804 103.151 300.485 100 300.485 cv
96.8495 300.485 93.9382 298.804 92.363 296.076 cv
90.7877 293.347 90.7877 289.986 92.363 287.257 cv
93.9382 284.529 96.8495 282.848 100 282.848 cv
cp
.0313726 .713726 .901961 rgb
f
200 280.553 mo
203.97 280.553 207.639 282.672 209.624 286.11 cv
211.609 289.548 211.609 293.785 209.624 297.223 cv
207.639 300.662 203.97 302.78 200 302.78 cv
196.03 302.78 192.361 300.662 190.376 297.223 cv
188.391 293.785 188.391 289.548 190.376 286.11 cv
192.361 282.672 196.03 280.553 200 280.553 cv
cp
.929412 .0235294 0 rgb
f
300 273.397 mo
306.527 273.397 312.559 276.879 315.822 282.532 cv
319.086 288.184 319.086 295.149 315.822 300.802 cv
312.559 306.454 306.527 309.937 300 309.937 cv
293.473 309.937 287.441 306.454 284.178 300.802 cv
280.914 295.149 280.914 288.184 284.178 282.532 cv
287.441 276.879 293.473 273.397 300 273.397 cv
cp
.898039 0 .439216 rgb
f
400 276.226 mo
405.516 276.226 410.614 279.169 413.372 283.947 cv
416.13 288.724 416.13 294.61 413.372 299.387 cv
410.614 304.164 405.516 307.107 400 307.107 cv
394.484 307.107 389.387 304.164 386.628 299.387 cv
383.87 294.61 383.87 288.724 386.628 283.947 cv
389.387 279.169 394.484 276.226 400 276.226 cv
cp
.0313726 .713726 .901961 rgb
f
500 272.424 mo
506.875 272.424 513.227 276.092 516.664 282.046 cv
520.102 287.999 520.102 295.334 516.664 301.288 cv
513.227 307.241 506.875 310.909 500 310.909 cv
493.125 310.909 486.773 307.241 483.336 301.288 cv
479.898 295.334 479.898 287.999 483.336 282.046 cv
486.773 276.092 493.125 272.424 500 272.424 cv
cp
.862745 .00392157 .415686 rgb
f
100 358.353 mo
105.947 358.353 111.443 361.526 114.416 366.677 cv
117.39 371.827 117.39 378.173 114.416 383.323 cv
111.443 388.474 105.947 391.647 100 391.647 cv
94.0527 391.647 88.5573 388.474 85.5836 383.323 cv
82.61 378.173 82.61 371.827 85.5836 366.677 cv
88.5573 361.526 94.0527 358.353 100 358.353 cv
cp
.996078 .596078 0 rgb
f
200 354.558 mo
207.303 354.558 214.052 358.454 217.704 364.779 cv
221.355 371.104 221.355 378.896 217.704 385.221 cv
214.052 391.546 207.303 395.442 200 395.442 cv
192.697 395.442 185.948 391.546 182.297 385.221 cv
178.645 378.896 178.645 371.104 182.297 364.779 cv
185.948 358.454 192.697 354.558 200 354.558 cv
cp
.988235 .807843 0 rgb
f
300 356.19 mo
306.72 356.19 312.93 359.775 316.29 365.595 cv
319.65 371.415 319.65 378.585 316.29 384.405 cv
312.93 390.225 306.72 393.81 300 393.81 cv
293.28 393.81 287.07 390.225 283.71 384.405 cv
280.35 378.585 280.35 371.415 283.71 365.595 cv
287.07 359.775 293.28 356.19 300 356.19 cv
cp
.929412 .0235294 0 rgb
f
400 353.24 mo
407.774 353.24 414.958 357.387 418.845 364.12 cv
422.732 370.853 422.732 379.147 418.845 385.88 cv
414.958 392.613 407.774 396.76 400 396.76 cv
392.226 396.76 385.042 392.613 381.155 385.88 cv
377.268 379.147 377.268 370.853 381.155 364.12 cv
385.042 357.387 392.226 353.24 400 353.24 cv
cp
.807843 .164706 .447059 rgb
f
500 359.688 mo
505.47 359.688 510.525 362.606 513.261 367.344 cv
515.996 372.082 515.996 377.918 513.261 382.656 cv
510.525 387.394 505.47 390.312 500 390.312 cv
494.53 390.312 489.475 387.394 486.739 382.656 cv
484.004 377.918 484.004 372.082 486.739 367.344 cv
489.475 362.606 494.53 359.688 500 359.688 cv
cp
.0313726 .580392 .890196 rgb
f
100 451.429 mo
102.467 451.429 104.746 452.745 105.98 454.881 cv
107.213 457.017 107.213 459.649 105.98 461.786 cv
104.746 463.922 102.467 465.238 100 465.238 cv
97.5332 465.238 95.2538 463.922 94.0204 461.786 cv
92.7871 459.649 92.7871 457.017 94.0204 454.881 cv
95.2538 452.745 97.5332 451.429 100 451.429 cv
cp
.898039 0 .439216 rgb
f
200 445.12 mo
204.721 445.12 209.083 447.638 211.443 451.727 cv
213.804 455.815 213.804 460.852 211.443 464.94 cv
209.083 469.028 204.721 471.547 200 471.547 cv
195.279 471.547 190.917 469.028 188.557 464.94 cv
186.196 460.852 186.196 455.815 188.557 451.727 cv
190.917 447.638 195.279 445.12 200 445.12 cv
cp
.0313726 .580392 .890196 rgb
f
300 444.16 mo
305.064 444.16 309.743 446.861 312.274 451.247 cv
314.806 455.632 314.806 461.035 312.274 465.42 cv
309.743 469.805 305.064 472.507 300 472.507 cv
294.936 472.507 290.257 469.805 287.726 465.42 cv
285.194 461.035 285.194 455.632 287.726 451.247 cv
290.257 446.861 294.936 444.16 300 444.16 cv
cp
.835294 .00784314 0 rgb
f
400 445.775 mo
404.487 445.775 408.632 448.169 410.876 452.054 cv
413.119 455.94 413.119 460.727 410.876 464.612 cv
408.632 468.498 404.487 470.892 400 470.892 cv
395.513 470.892 391.368 468.498 389.124 464.612 cv
386.881 460.727 386.881 455.94 389.124 452.054 cv
391.368 448.169 395.513 445.775 400 445.775 cv
cp
.733333 .054902 .352941 rgb
f
500 427.013 mo
511.19 427.013 521.529 432.983 527.124 442.673 cv
532.719 452.364 532.719 464.303 527.124 473.993 cv
521.529 483.684 511.19 489.653 500 489.653 cv
488.81 489.653 478.471 483.684 472.876 473.993 cv
467.281 464.303 467.281 452.364 472.876 442.673 cv
478.471 432.983 488.81 427.013 500 427.013 cv
cp
1 .498039 .0431373 rgb
f
0 32.1033 mo
3.41667 32.1033 6.57381 33.926 8.28215 36.885 cv
9.99048 39.8439 9.99048 43.4894 8.28215 46.4484 cv
6.57381 49.4073 3.41667 51.2301 0 51.2301 cv
-3.41667 51.2301 -6.57381 49.4073 -8.28215 46.4484 cv
-9.99048 43.4894 -9.99048 39.8439 -8.28215 36.885 cv
-6.57381 33.926 -3.41667 32.1033 0 32.1033 cv
cp
.929412 .0235294 0 rgb
f
0 111.252 mo
4.91161 111.252 9.45013 113.873 11.9059 118.126 cv
14.3617 122.38 14.3617 127.62 11.9059 131.874 cv
9.45013 136.127 4.91161 138.748 0 138.748 cv
-4.91161 138.748 -9.45013 136.127 -11.9059 131.874 cv
-14.3617 127.62 -14.3617 122.38 -11.9059 118.126 cv
-9.45013 113.873 -4.91161 111.252 0 111.252 cv
cp
.988235 .807843 0 rgb
f
0 272.424 mo
6.87461 272.424 13.227 276.092 16.6643 282.046 cv
20.1016 287.999 20.1016 295.334 16.6643 301.288 cv
13.227 307.241 6.87461 310.909 0 310.909 cv
-6.87461 310.909 -13.227 307.241 -16.6643 301.288 cv
-20.1016 295.334 -20.1016 287.999 -16.6643 282.046 cv
-13.227 276.092 -6.87461 272.424 0 272.424 cv
cp
.862745 .00392157 .415686 rgb
f
0 359.688 mo
5.47045 359.688 10.5254 362.606 13.2606 367.344 cv
15.9958 372.082 15.9958 377.918 13.2606 382.656 cv
10.5254 387.394 5.47045 390.312 0 390.312 cv
-5.47045 390.312 -10.5254 387.394 -13.2606 382.656 cv
-15.9958 377.918 -15.9958 372.082 -13.2606 367.344 cv
-10.5254 362.606 -5.47045 359.688 0 359.688 cv
cp
.0313726 .580392 .890196 rgb
f
0 427.013 mo
11.1896 427.013 21.5291 432.983 27.1239 442.673 cv
32.7187 452.364 32.7187 464.303 27.1239 473.993 cv
21.5291 483.684 11.1896 489.653 0 489.653 cv
-11.1896 489.653 -21.5291 483.684 -27.1239 473.993 cv
-32.7187 464.303 -32.7187 452.364 -27.1239 442.673 cv
-21.5291 432.983 -11.1896 427.013 0 427.013 cv
cp
1 .498039 .0431373 rgb
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (Tom) ()
%%Title: (Abst. background_012.eps)
%%CreationDate: 2/24/2015 3:03 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2KYo/QZ\^9;=d"'J;k<:#$1PLp>Od:b@Op;J/]8jjdQ1R%^Ts0FpiF]K9_1V_uT*+BUAI?rS^D5XsJ=GWH[7^^f,O.1X&
%jc%uPCD])02?*Bs_SYou@G2URUY)[?Y0of6T\Z]FSPGk]Dmh`C\\aDJ,I^`<LF_KAqm9[JrfrE-jiSm.M726(UfL9TB)AU`c$=Se
%)XS1Vr43!*?ik^OmJb6$'f6r-h(A[.F47^U>Htmf!erpt*tQil>,U+-GAGICk==/^g@j1K7qo$J0#2"53>6iWiF8sWSs=Zq/mC-0
%HGSA(UE!%6PhU+b98>u^Y`MF@#6/,(bWn(BT+r%>X)>iDn@b*nEt2F;i1PmA=KI-fj;\sg>C:r]ZiINc&s,Z#j7K?O06^?(Q/rp0
%2n-Y1oFIZPn:3R&3.B`-Xa%RB&,_q*T,^rE5(t0KWjnSu=\Jcub<8YEe[3Sh)7@(H[Jp<W\7G*k_d5KC^M_Q45W+VV6H4eoAi6[m
%Q>1YB0,%tU,j?uNEEmCRVd0kQB"`t9=N^kgQ']1bh=?U@L!Jb;m'kE_EUsV?\mh+:cHB@9_p=aR($83-p&q8p5gsg4%Z3ht"ro:.
%p5q??+GK^[g3Kg*[UQhX&R9r]kZ5;r<<?n:)$9=EB?ph:D^^&p["*M4Rl1EEVKGehdtHPumiCpuN\>][Vi>^+BkIVA)^&NCLjYt"
%mZsR&$[`c#o62hdd7l]AeUW.XNIO)%s+V]r/JLURD<%[6j&OjRX1$9U-4(,o_`SIAGohG*4RD3UfZj#N6qeMRfI%*4:Df8ai#D"u
%L=csmiEtqP-t'MN!J_EtGbn6P5"U?-PJm'+G`lHi,[l<BcjXFh&R1H)`M);&D8U=?_/>&Frl&c2Qb\nm6_s3)p-GMD0B"P)_$2,j
%p_Q.<;YV'+@`2_S,?"<'E5soiN-O<]N2@!bm"VIt?gNt%fI"*r^b\S==u'"7?T+-WcOaLB1[*Kf"MA--ked=-2oH=.i`(l!%!-TO
%1Ci;M2oJR4RZW=67NCqOIR41**8k064>u/*m"RLZ?cGbd/r[:K!aJ[F!War"8[+5+aCpXj)"@`G)"n@=!hOt_<b?C\[]qIE+8.u'
%Ko@4-1n8""/gHDO(V;D)7iWCPfO4W8I1S[]/u2b=,Xsu+#*X-Pc9c2tg_'$LA=-2L9d4i*W6aC3ZtCmFiXt[30`jQD5'@V*Zg$-G
%loP$aJS,pe8N,Tl,7p=gTmob#ea@'[@(=k&C7bfAWI;Q-?0hS<M)8I/PM#\ggOe"6)[MWM-Oj-&&`="X`QE"+2UjPmqM27Z<LWiX
%A[+nnQ2PbDp0#)7IkVkd!W>s#m%<aQcg$eo$Ng#^#it7Orte,jP'U^>ig>-pYO!>>0,@]SH=d+K-2(KTZ@@W,a7VRc&H=NbZHqMD
%HUSo+Vr5'M4#8<(@DO>pn-Ye?;Jb?2_1BoB>Yb\T?[][7?,-p+_(FS@^aFpNdkP@]Z&<2s^\I's1$]c)p^&f-?%BopGj#8V&/qGX
%E<loVK?NP`E%MZ#_f1$I4u9qL!/8BG,]jU"OA/o/7=nDC80NgpNgH)sn?;Oh1d%;Po`?o^#_e(ppr1eJD;__CT#!WQ%%T^Q/&cnl
%.!>YYK)NQ*rg*QVcY^7:JINieHAo):'pUaV['O-T^rn#"itdK.<BfAH)IO=W`PbJU?qUdR_-:(L"pJlU"*'5Gm&IRVlM.hr1\,j(
%+7?!N#_h1dhA7_n%"@2lr?Co/'A@m$O(.-(_8/SMDtkUq!70"m_ua%M[ZG.S704M1pTQ0"%W!U=JJdj<49_@Z&$I-D$0EWip>Y?`
%BI%D]k]e6IQAKk,DPHV0;:5^kTB%7cLiIPj@D-%egdm,)AiF-M'3DMrp\5smT+i;^$O,t*a/f?7e"e'*R&GQ=EeqZO8Vi0f3\+Yh
%0`j6GAau[+6$Ii-NY,sRV1E`ZY#q4Z\-EWZ)[eMP0Uk+[?U:P;G*1eLZX>!NU#@Ci,]dDueE&Cc%4$oX`H?dKj=it&=VKdA!D44"
%D?rPDV[iOP!?^Nu*l@mbpJB.PMHA@`/dQHV$oP^$hGV-Z7+G*9/d>$OjF[Y5LoIjtZ.3^"*FLHgBhQ@l,_cY0QT1[!JW]DuL+2"k
%6oHBtQ67NR/75&^'QI:rNa:[/$;_P%08FTdjW9PB8`Jha^u<A^:^IAi"PMu=73XN?!X3s^,De/p(=6"mo--N+T=%bU)GJl\k.o(G
%ETf+*_0ub%OcF8]UVMR2/c_+%;!fc<#:>$S.!U?,O&M^O"AKdKA))"$!fQ9#&TO1H$K+Ej+H%H\E2/#r/p'H.F<c\u.<K_%,a^<A
%%L3b@A`7_WVJ.&I=?bnn5W_,;nrE#B.:YH0))AQRpks]0^siM#Ju"+':^dbK6Gd8(&`DFk78AE78hY4qP'1X`oNoTjN%(SgZpY'F
%igAa@(bR]RX[&og/KE\+:^!3(3X:+5&D&p:X8m5VDs>f='PC?6bT%d-BE=ogAjho25jj0iULc68OU@Lg,Iih40%k]Vk>C"On4Jm4
%I.^%WQ@<:\"%iT]8`>SX5YJ@*d.LHpN?k'V9n<G8&Oq$P]MV#B9fEC_J>>RQKn'u6qa(tlZt0Hl+K%EF@R'O\+u>mLqL\;7Y:j]B
%ht9@D8'%'fU2L-!fL5qtp,L$TIYrb5A+#1-:2\:7Q:DlPN0t@^>?ko<\5.aML:V"r8>Hc0,#rUT=NN>@Z&iUqgX+ga>W6+M(5,.Y
%.#u[GbV1@`5US/c*"GmW@4\Be.1.e@a`SWk@HK-fCjhDaJ8\lS3qfg'goLdmPR[hffM^^u11jS4@!7e<`HD#"0U^+AVM4!Sq<agf
%Fr7[r9X9ST"eZ<0[>6oCZs?=@;[po4XDHq>-)#6J;+l`WY!Nu"fo@ct8=iIO3[OP?9%-YS+6G0ipgt7a(+(YSWT0JEL_>K0:aEgl
%TTb$Bqja0?f75-Xn<p7Je?C1).jn.aRtgf^/t3tU4<L,-oW2<'A))Ebf-3-XM'bQ\E"u3C$V</a-FATB*u"id^gH1U3j\4$M\OgN
%Of,j@[blcP&e@O"`AT6?+<=DCdBfZOW,#!9('u5ADj[/\P$CJ;.2M?0&A^q@.GB]fiW;J;'$@uqMPsKRH<*l!P$6B\0)'8u/ukGr
%DSYWdH=P/NA.C'_P)8a),)&G++5+(Hs",s8c(39:,!0V)"I;R[mDp^.;Yj5hfL/EN(Ra_Z3t?Emr$(!`a4sK'HGg:#MXLrAX8fX?
%0a!C\Z,7tBKVZLj[Tu1L7$I_S"0j+ujj"0>'3u)g:W\r"Y('#H=QX6V,,V*n_dKb,d,pW?:d/esKSZoNED;+r-VW!/Y>$E6`<d.6
%l2-&L9LamZY#lT44"6-.'4^3-$8$V$+>i#G+UIFb"e&:[QmHh^KEfF"\4[_o2jl*FM`2?7S&CQQ5YUQd1a6N[,>1ou*_F"0L'gDg
%Zk!Pr""U#jBm<U_/J]Ma<a]t&Jk65]$%*U#MK"-7'5Y!'&47J]_:R^Y@Ef"OB^*a&<s_uj.jC&l9m(Jq.B3^^C<oa*`3F@i%A8-f
%!@I^E!WL1dAA#]SAt3lXjF@@gbV:t*cS?=if*?lJB+u=THZY,)%(*J\m6_r:7R:FVO2Z8^"l>.5/e>Yu5U8$Co`Hec98$[\"!*Oc
%/8=[6+F8IH$PCd]bK;V'bf3p]CF8/"-L"2uE6I<`IpPtk,RX-35"RmJ87YOt"D_)urUA@fEYiEXYMK"f>th]u@ps5+!2U1V1'<\S
%=t:2r#$*4XeOX!!UQD5[b?R8>8jUQ5W\2_F_G,gk+Tfeg*-^t7$VFQsMCDZ/'C-W"Om17(RSJWlN?MpS95ouq[:9d,^]i?B78MA\
%ffhI<Ni.IBiRKA?cb)6,Vt"$cMnoE&:..8h/lK36JH7PLgat?_80;ml+'HH+$&8\]FL]6V0Xq0cRRg%,7P"s8'b%Hg\JA]^%m;M]
%1057_kC%H_<4#1K8>:WI^WbS)(.P0[ZlJL6Z5'1oNC7Yp+D\jG<+-/K)jD_aVBhWTT+DqR*-$`;(UU`EB02MA64-(#9AR4E.+65(
%YLpeE`.TXLBi,`0igMWD7J`&&jYkE41,1+g>6)Se[L'.op(Y\h$"06.5X!H44COgu)"[5m\3^e\<mp8<bO^r8HJ1>@AcgV?!Xh4t
%OX&p>1H>uS_4qnab?-'J?9KXqVW0G&WffO]TGQXg'N6\]L[E#(1K$ePq_9O5&IOg\`@-0e>gJ;LOg3U-`9`&s'r,e38kaN'_NN$N
%&e@nJ_B,ZF^FrMR3N52,ML8*hi:#:29O2%Pf13g+eWrb+Q\]aZ\g"fL#<YZmbGjQTQMBGiTjB;d\=ZWSE2ugb'k*,T-)/f,H)(^;
%MZOodS)t7ClZkl?=Cd3N2rM9-cRq=B"J>(cLhV:/>3FM6PR[k+AA8c%^ZKNP)"Xu(8+Lhc*I/dfKWeeLMAh!(!_Y*SB'Ca<&EbfZ
%NdRGJp))8gdU9A7RamS8%_)c59/38<H"6?O^q0:j$t1kQ6N_gLp)oGWGu(6i,3BGUn1i>T0c:P:!</^P,F:ZGc9f6A:MH$^+NW>@
%+En:^)YY]de&Z!VLepq/'Z(J=b@FmO4Q2$O,jq>H_Zc+uO4o_J$:?[g#lCcl_QcbPYnE`Ui[87_R;Cr=8_sWkMD<'9e$XhCL-d:3
%+_Icr=,<E&"\"QKTiflWnKeu&g)6S9Z5b:a!s_ugYd?*3Pf1#=ai"P\Lr^3-mMFYpNB']1[8c>IDb.d&f06a7!Oq&8=&qo.F-oX_
%of^,2)LgC%ZmBsOPW/Y\RiMW_f[pmBnh_1q%h+c4'c]K,inIKuma1\2cX@0Q<^b4>cW#.?VB-Ui/Bp(lker#_KP[tT8L]86Nrl#)
%7Zi_38uWa-JfhPa(6UhYR*B2;&@Va1WMiH@ZDK%5n#B2$!>Y5tBf!9\Tk'BjiYspj^mB`!6:I7UGm;S2`_&H+iC8cq9TcA,iiM5;
%3S[L&TIV<1q6=skj<0INg7RA2B&>sagI2`#.'g4TV&<m:!%Vg[N'PC&gt<*=*3FCumHN>sCEo8#d2]IuFr7&W4;lDSdR=g:`3543
%0lp)V!PB;LK1t5FW<A0OJ0sa1Pm=:eS1(o\8`f"?B6>Vdjt`uu?8k(T'u'da'Y=-ur"qY1n1Xs`NdYV$$N]?l0676ormVb2R6-$P
%T>o0:3Ud'a,Z^XV_f8Z3#8*b67Rgt,q*LYQ'8Pl4>au;UM4*Fd-Sfg;+;\&+cSI#9E#HFDJM*Ws;F_[XQ_qi!l6Qi)E#YL/Mh2H:
%(s:o2-[,1emO8!$-=nDnEQ%-m1XbmDS;]"f#\*3nMi8hIp/nj&4MC&7^D;35(YaY+`qZ+uY_=PO(-r8!T4J?aH8BdUO(U7'o&;hb
%c"a6reM!cWfL\NU\m%?shfcgl_&mlhDaW6LJW4H]76f]j"UrK!#1Mg&UqIP_l6]R434mEmGpoBl<ZE<.DANC-\q)>:i&7/(oT1FX
%#%'+-j2.ON4AB8EGWM*%M9Jkn;B`;IZ*,oK<^)=fVR?Q`Ik`9P7c7"E(r47X(Xc5#7*S.:_&-;l#+mk]1:=\$.b]u%LlC'D7-#c,
%Yn2%:dOA2NOa23<<Kr4$<;2A<a^?PNq2o6M!fGH7J4MD_!uB/rWC[^A%.C](VXB#L/t9cs$rA@oDQ>Utnst"WOZC?,TpMuJ,3P@L
%Q4YCibE>[YY@AM@\(j!;mM%gAR\(0U*R>b3UB%/^Gk-ECKOclC>IZ?(fu$p^a+g[?^u4HMq?P0X^To=u>S`>\cpY++'tt0Aa"F)W
%%W<<ZM@1T5CcHB:K`NEGQr)eE38j@d=ar6ZGh8`56_4o*q'-Zu6k\sN]GB?e(A,tRP0o`BZe+O=bR;<$S49:s;!,`:]eL3qp$nLL
%$Kmos0"tbLH/5+J'5:iS%oX$JT]!5<!p;H8k$TKJOL6W](tc(1Rl:[k+#0Uk4ROOh[dki0;q$pkQRaG39kn6Po9,A$`LX5$.m#MI
%Pr]boD&Mb8/L_\U;4Mqqo-0cV&D;[YktcBBlp'%3nH0fc.^>oRiu&(*]WCfmB>blm*Q$._.b#bsj`3MF2%?<T;^hP\'q.tq#9=Qu
%XoQCV&9gT\SoX-QO:6AS+Y5ZV7ha#"+(@eM:di4>U>p9VX")49&"`?LKEDdRio""t_DH\(W8b=c:r41^G><6_o*q,g-OaP@/e>*f
%+r]G[nN!8K$$(2+^i?.o#LFlj+V;O`(nL_<"\ToL;R*^K0SBbf80"]#KL\oQkCKmM3;F^MX.':Y?US6m(!4Dl'H4Y7>amfk(6<V>
%3'<jk/9)FSWe^_*88^,L)UNTM<KBQl$dW+_\&/*'6C)`[:Fq^4jY7KEc>(We&I+tiEVhU%Y@p=lA7[R"p?U))Yb;c=/(3R]hM'Md
%Zr0:j$EobQ62N8a4ZjcC7YBEca3u?#2cdJ(_Hjeh"]O2BG#[F^X<I7^#V)MbQ22m8.#+]ETYP"oU]Emtm&bMDGg!J.["+);)DqSf
%Hq7@:UdscC7\(!fPAumA(VEhZo2pl__HhVd,/OF*`eG%+Q9f(b,:R?L,pY]A(@PYfI$!ru1:]b)W9mHu1Hu9;L"-ha">'MOQ1V<)
%$/8>U*ZGW?*M(MMo<HPNHT!BS14qu\!RcFo>aSQ#!Y!!hXs3C`a;#Ao/H]OiSO=k3+gRe&?A$L:P<'*Hq%^j9R'0R]R9G1aZt[Sp
%%s7A<PLp43K:Rc4=C#K8P^I3,Gaao`5DOh"'aV"8(J5uIH\g+G5Y_ptF's@1P>DGkK<Yj</9R%(&#jh?Qr2dQHVCBf=V\J:dcgLk
%EYBi#->-B',pD>JM:A$>W]GtNb$,L](TRSpk6!3;`Nje244ZjU79V8Sjd(.]-72[+*$(=>0<*EO86MBP<$G^5">:-6pp<m]Fp][V
%1Q*H(5gFm@DmDh%!\;_3Q'L"]C"4$6o]J7(4MfX!7`Jc0:aBFK:6SR^M*-r67Tg`U+Gd9^q)5dl'6$@PZB5s9q;_Nj`0,;9<tU?E
%M1pVmWDp/X8jo@-UOLR6rl/<aKSa$s74t70d9`&k33:\(K'paeIubU`,4JuI,EBO7^*B]g5rPBC$1jl>dpc!!M)[d<@J4V9b#NDR
%B?8%D-a@^4qW(o2#(Z:Zb7,MT;d'mBf&eidN$Y8)0V9ddV[DFbL^PftV61fJoP#6M#FC+HJ__1':Af_\aI-5K;ts'1)K+;rfaOuR
%*4,Ne7]A/>EC&.sn,c:I\qP_`qYijL/5]JO@.f0s40<6+jUDMO7k>;#]XF<HIlB]tNG128%W'[H_Vjee^85JIs'YNk6YCF.FB,)4
%3MI*Ik)B/S<.:>rOScN>Gpl"5`!^fUU,ZoJl!Ic.&2@Bpi:2Zrg\I(dBob[3pQZqOl[_^G.1?6F,-n02'R4p]J<l/3`CbXP=$DQc
%QV"1T6m`!fPtU0-]@[OC81aL80oG<GX,Tre+.\Z]Zo])JdC?LIksSK((\Ih?&mFPAH#e&E3K1nf.R4>d]M[$*f__r)R)l5MmU"92
%LJe3fmL!V*j@R^&eN%\.`pCF=Ktt99pMlR@[KTumJ9i%M.pY&1(n"3#@46050h].^7:.b9)V,8<PJTRN"n0I<]tbA*&"u^/^BJdm
%JSIO$Lkr.[2,'e9A:AH['e=[^3Jt7+DF^fC;O0`qN\"+&U^[)UR01L>$*0?SEDqEg%J,0jVSLR)iNX[jK=23M;oVSR$R=>2k=8dS
%4HC+`$*saiaZOgZ4sGI<Z#`Jf-L7aX6Bu+2@i>"2au?>V#QdZ]9L9dE"XH"=RjF&&;$86RDcs4ZoLILgCD7)e)7-Q6`5`dT/&Vaj
%8<1eCEQ!9[rk\pb>f[ogmES7Obi)4l5#hHYq3F":>?&(%%%Raa>EK:,8`!"fnl%TD_!`<1%p+#8KdcBuVV#I+;q+:$\7]A.\hg&A
%<@4di5h$T)YC[!mi\$@DdDY-*?Ng4bN<@9S=5Kjrm\^=iG,GlZG=lJ,#&BHKVL2cd%`QN+$'kTr-oJ%"(^U,Ld(I5.G2P_1fHVRM
%g<Fs8S6o8<kh8nfmBuq$:VWQWPF"u\:i#!1./s"f96MmH3N2]1i`<\ECMc#URXb6J0rd--e(gG"dVZF.s%TQ)rR5]SiDFKTT%fDi
%DO2k-#CMhco&X'@d1$a1eB<hl4%C)p/8O%Cr<ZQJ!*,&=K.ErRbI#7\XP(<cUKMB3nRl$D[SkX.>KVq?mVTMjate6?0=S>LkTda3
%iG0d1drqVm6m@SgcN*rS3bXj8/QM4FjPkL>W-77gm,J(W=_!aHO+(?)2X@crQ(1ZhOmb(mf1k"Zr<<A1h<S>,Ngn;)+p@5I0.CeI
%]55^@/0[0:=o^0Mn)T1C]j<d=QWk96b,G,+>aGh(1H(F2<J]q8<p[RH(E4DM-0oZa]l*]?i8F8DN.,!3!hYLajf=^BFAuu+::'@h
%P/L8+"rd+Ph(Z:`d9l!QjT6.[BtN0'V)N4(P``:UUC,WpokN;^0thk__T.5hN\8I+CrW''el0iZSq**RXiSZ-NV:=JfYsUE>=ksR
%`@"?]b4iG(q"/HBpLU\"dedLUJkq"K[t!1PBg&s#pJnm-(KZ,X5]kolW4cd+(q&,[_*4-B>.rWb)q;dJX_rd%OVdO`pBT[f(Di'b
%8%I.pR'L_ghrW1)]uU$J\>DooI)UEIdQ\R*du)$"),U*TE[[;E(*rmr4dQ0]hJ]uf\O^N!(YoMPLlRZcVb,a<p'ed,EBBr_:/?nn
%J7)aQ8RWKRT1&A'7JXm7)8032"'4&g3?,ocVA$STp1Y&M`_(P5/_I!@W?EX]#XXO5;7?b\o4E)*e.3Y&Qpl&mH;@65k7./t`(nLH
%1hilFHbe2`p2$E%Ul_p#`iRS"g95VAIqI]-hK`!YiV'i#X`iF_e[*m5d4qE%\IN4m*6^?Wr:Kb2V4k^fT(5h(PZm*.Ja?>6fP=C5
%KosYTBJ`q-]*pD`#$b-Z8Ki3*m'SA.(5kVfYUC0?-GEh8&F3/+Q=7E'-7Ht,\f$%K@X=>ET8.GcJ\jO6Rl4g>U"jaEEm?e34):2!
%h6"G.eiND1DC0tG%/GYrNTDp3a*B3pO6,N/gcUmla)_4N=Dl*h"jpR5,c3_rF)Fo=QO0(JM<?#0M:4]<qU%aBgAG`8F<q>(Kn$kg
%]M,BHh!%jtl(9j0]!G'rNo#1^Gb*E4f3,*kp6rJ5]hYJ+DT(.:2r/q(#'$\U0tGj!%Pk(f/8fT^-9']QR!S/M4?Ml)h(cNMLA1O.
%iAQn3gb^cgPu_)Qe][@.hlUK8D.I)!n;rJeH.h^<1`N!'q5<^\6RILoL2)cEYC0HSUdp\j4\J,N^\ahrWhVA0AYp4=6J0%*Xq.K.
%*2"D,E+Jq03rT)3#4@*AhKA_WJ"Y/d9q/<42\=8`Wl!#6`K]O8<ig,]php?nr]>*Aj.KOjFEb'f,*m^#(e<BNm;hk^P>9G"joslp
%"&iu;jsG+HqWR*;3MoLQA;CRFm0q4S:6Q<m%&WF_\cbPG%aJ$DB9ucNn)X\[D\bNALM%\=jp\2f)6ekWG--+2Q$0L(.F45Yr/Kn$
%'+49AFJJlk3<#P+5Adk%B/70,;U_n;[a.mJj@jk]ff.XPjMu1m@UA0fX7A-9at]bWFd<&`.8QJ%k.Jdu3c$-KjR]RcBqs$kf&LqB
%r\q`ocY]jq1@lCOHu>:O[9aUYMiO!1DRELuB0"/)_:\+_PaZ1!iLbd6du)>PefVZOhe]`*(\jN8$r5.`L*:Uq2YChO2CPcdF:6[,
%i\FSAs.efM(=^66\e/i6[s*Q_UY4>X'=^]qGAZgeY(F?@2o]KnXD-SX\,>[n%.<VDhVFft.XC1EmQ\r/^!)GoaahU:(nMUp5XCXn
%d%bPWDD]f<;-KlQmUnN^)&b7Z;*3!@+S,.!%1ej@Ib3,,l..<LXV[27k9?*fR/R/[>N,FKAe;#rYr3J]R2'L9XE@_>E[A[XA(`BA
%B%#aFQ!q647u&l4knlGNP8eg`p:\-W@="E^+Vc#qH:L]CNm!M_RiNM.JHlV_/fe$/HS5'4.>d<?Djbi)mCOUdS]`hb]T3KCJ_A`L
%)3DDrjXFg[bB2$Eom4%RV"t5-M<h7XSs2mo1MIBVDc3NE&C#)KMgO'G+:]:A;9eZb*S,"(B[ggW[%*g2*od4B?8G5WZds8V%FeOm
%H'Msa;n#?W;6Kq!rfKLl^t*VNm>P)&opc^gNFjDf67u=h]rU"W1):lX^%8&HC8VblB>CTPXl4J:B#.,`SJ5*B]JpohZ1psYib&,b
%qbK&S-oYmBRA=]qG<p0U*mD&*bUZPf,!`3aVFm((aNR9Q@U=mH:&3I9Ou;WRrK^NZgu9srbjpG)RB&cUgnn8>/BH%ml'^.tN8Vml
%(?L%"?\Zp87VYdU.>@#i7Ca/Y:ZXLbU1?Q%<ijQY(1kWtSJqo4DJ(OnVB%Pe3pnoVU1?Q%<cm,uf:lg8`O,)ogKKM5\P9I[=cf&:
%?2lENBkFWI-5/%^6>K8XQa?Y[]M'&HF&'s9_^T2Q&\f'<8O@BsSmN=OT+pOX0IIOT0MEE?Z=JpV:\pLS"3YT<QS8C";eG0<m:Z'[
%2qMg_82/Y2F1jK`CGV[98o870]5+n!>t^<ZF0.@PCB&1R2L!_iQ*WC#C3-NNYL[IbM9s?IcF9^2,T0/BIm&scW<9s32Z!5djNk;4
%"qo.hd<lo+ac(#rg^F@6%-bZ'21/Tb8U4hGR]dJfW;W:<&*i6u-PO#QES=s6SR+1W]ha+.*o9e1<7A0Wj8(FclmqC:V<)SLe$DEK
%^6:nN(-S#(b_""H4Og4V_T07CN64gWe7JV5PUq3N57HXt@<Id_oLkg01)]bO1Y43'B=dTaaMI=+]SG*]\<-SN[tRL.!r863^.b#3
%FM#99msbo4:8U36dhe"i9G)b4FT.82r3LB21%f`9?`U,;ob8k8NgY(h>\RNPRN2Z>pNtNVWW/_WS"q5V#jc/$$Y7<l?!^T!UGE!6
%9e:jW!Jg!dPko?<-KmL'^`eU;^7:kqc,,8%nEe'/S/`#'ko!:19e<bhh2A>@S&N=lP\p=YUG>b+ni&^ZnQ$LK=ZhN88`%`d1!ohn
%^\R]or;:b"c[R>3i5',kjn\`@r;:bfrqhcG\<UFd0gG]/TE!3_It,*)LaU!(Z(B@,S=fUPBkD/'o-Nuaht`]/r64nJg$p;hf:.9G
%b`I/<r1XQ><\!m#apcK3*&')P4R:iab4r(-^>;eI<OI!nf'B,cAcl;d7MaN.1h'p#6O$QICS-/FR$DCah5=NP9tR7`EcR(s;J(mM
%))<)?bVNf$%,!9gAb3+=SS-%+)7"OBD"OUI&9c9HRZ'[Dlf[XlD6/AVR'))/Wgu*#s/\*DBm77]<nEi.EoYkpm<S\I&sb&hONoEW
%[s$<f?M@`_IBk8I:.bl,%-XL0plmL_VY-L!R\j2^LisTBa[BoCMCd-,j_AWj`BHq>hF];+&DO%r>@;>)AKQY^9["a+YR^lD5ET7i
%*\o`_iOU`:<b2-jl(b4Q+,PD"d<e*T9rZDO0D!-*4Rk1&]Z_$Bo>Jg7naaH%<1%9+M&2b;U&<(rnM8?$kWJD+'8`'tl&XRtk;+t%
%Ua$pCc#a0S[bXi.lQ.kP;^)!"i@mjJ1trP1aRXk3q84PV",CT?fL2#1Ak`*>-F+G^9ts]@[1A`$NF1d%+^_p0:p+)NL,CoM;ln@.
%`c4'70^ZmM2EZi\-_lj8JXh1A1,H@YrWK+Qo`V.ai9U=*9Co&79hJ+Z2:!^4\gUXLJ'Ga(k-j*2TAcbJo=ORk`[.#JgY"B1;.MQ%
%2jI:=8VpI`*3QUMI5q-fmFu.9[9)tdXHRgI2mh%K7[6)OH[_T+r&;Uqs+J"n1DlK;cJ6u(bFV4;[k:!O1#7PQ,rCP+0gV-N)\Q;D
%NX>P%VIO.%iicNC;c+\+2_ek0/BD(lfa?/<a,)fSs0=c,r*ddX/<Ac7o,'7te'*1\,Ido&N%?s4o,(CFl-A"STB@rkH&QItbWLq@
%cXY0i*ol,kTlnPH.^!Z9I!4'n=1[Mib@W>!]f@$U,<b,['1&VgMlV+MFIW2*\(7ZdQ_WgR33h@\Xe+d[j1aB66I*YbGW=#`\W\B-
%oQr6.<3cWe"8sU$>F*<!20r@$Yj;;4`%ess`3rX"9\.EMjuEf)[pACI+#K3R:ac:9TmVSJ2!Hp)f];2UYa@XakW4)<s+m@B[eQr[
%]ZQrQW8"+%R6N5OMo<j^QLqenb2TZ)dUsk#0)>)pNt(qkM4`g7qm9E0>0h4eE;oKnCN,^>m;&-,KGdA3rnL4So0d9s[qT:5bIt3S
%0^Zhc`bd4!b(S!OfLnju9Z9k\E^W[*HOds..'qF:aXs!ij+LX.M)T<j.R$5adEH1]EI6NUWh"Dd2e2sOZ/#A,f?C##Gr.I@k,(9A
%RR_GjB^U?`c"6C'DgO<b$d6G*Gs%GP\IgV9c=Oe-*mW$J\Tp.n&*N*6gqPn?>;:%^5aMq:Bb0I`gD&(I6=q:e9j:0_[b7aR\'%pu
%i,+P<DVLKnA;CQS%qM(*/Jf:CTV%@MJXcJu9$Eog3Ie3M$pIa%K#lahjn3C1O>3/6F<)>]p/T%HVtG)lE]qI3R]UV,f);k>.Jqf_
%rhsJO;Y,@$P.Q\1\3)SE-mLp^ZAfJ2]U@PDs6Ma#o-EM+DO@tY0L;hlTa*^rDO571mI/6qlQXf;i-#%Lfdl+VREh29!L"/,bhk^/
%<%2I#FS^;Z0in3V;%(VQI1(CffPYZHUp/$=8^ck2ccVM0/(=@,cNDi"',m:RDg,g[;YG#?^?#Z>e'>2lb5\SLoeN('ae"]*XI%o9
%6>7H(AP@;`I4'^]):f*VPNR/#:W45TS)%o$JBP\@&5iSAgi8`RD_B5n[)=o?QMtbZ)egYF@!Ka,4$E_uTC@5_LJ/&ig[:*J?+[(Z
%m=+?TU4678jjYa0\Pk<u:=7iEqW35IEIBOi:=6^>H-14&5@o!"2KYPWrhlj>@/)@XHRO`r%.#f"n]HI$Fm&UL3&oBH6P_P,3C,6e
%+VMK$Y"p,Lk2^L&T(eb(X&s8k\eeF^VQVG9.I265MNI/3mQnC,D-ggl*2co4c&Lb*n6t%1@hq7%]5dbjW+9cgVr+/kD<(!;``^M.
%cbF:8>+M8BUH<(C+28PJR?WM3p^EeLor[5_qM@VLq#Rh2o"3arI!EsGqeS(f@%s\W9UF]m%5X]qc()V"7_P!;2e,L!Zg9<lE>E`K
%e/PMA(u6'.d58aEJo9c))n4Fr>><m*n*%2DioBdj&N@fp2"T&7=NTL0:AmO8<c5fR14ESrBd2d-s,ZT'S`K42iJ1,)'DBYc=imcr
%Z24k-F6Za,*[RJt*T,#;!RGp$_9_X`l:&tAno`87ktgW(b&B;uXR2aMGGoGL_L?]p[ZamAK)(IAj)DJTRYA@0Oe&k")05V-n=-ND
%a1gCDeg<tl;)t.<20,1>/FVb\ghdk6Xgsfn>0P4FYKZ!_(5G_BK?k,hDO2<5ZRk"00SM:^drkKXXN,EESho=q1T?kF-Tt7RN8b>4
%]LDMi4MpolniAG/r&l?l^BoLar">fZB\P@=8r]kK1*gUUZ0C=\ZZ,uOcm*:+G^GsPf,FLN5Q:8[7FqTam@`<g^\dZB/-&LGD4[W8
%\D?IUjS$`Unp/s7mC0+rj%U>2ltW5!YLh'f60DO7S'CeEcHWc.q-6fNG?5mJnf.c4],uR\JBTk^+j::j7oUPj_@Mq4L%M#;r-E$D
%FtIHQO78"`*S>9`)U6#8oEdJ4i^_pN):[5M&<3#!#.,b=C0.N`.Q\NYIJb>4R.09E)-[U0:Yp:)$_6_!kD*AOdi631/9hgHVW[GW
%mii_oC7sG^^e[&]mMiP3Pr"ET?LHid,?OgG/fpak_\uMTL$H?K+Ebd7OVA^32cJn4>YhufPbE)9RN:h8O,#F'dqr"f(oW*Y]_a?[
%Y5c?\s#I$nDlfUoC]5<;G%&f_`XJWd])4p`J8J!sO+(?)2X<?Qs/0f0J_'-fi'8*JQ/37o#/tU!,\#_C<A^B(i5\%A"V$o3)fb\"
%3rtnKV>+Clo8?Y[:8'>2N&AZa-]8KRSWc:]mEYQfeegI.Kc?dk#u.>tj33_P[+<$2qRX55')DZ$O4*GhU.GQ0l.q](!nddrj&lqq
%2_16ZNDECq84;':.2;f+6B(S_(/D1*\q]I>9KOI,G:1]6T2uA8IqDaifQTB0*:^-&3o/rK'WAe(.\^^L1AY3g6UB+1Qdl&S^,`d8
%eEMGlcgBH/S[6).5e^krPBZ<"b3`'d/$<IED;0_]LM=:_#4EMsE!_CD;kg^%Cbp"eN7<i0\I=-?6-Al%4@Fi]+dM;mIL-GUA\V/o
%S-,IgBAJMQ[P.Y,8@5T#SNMLsHK&OX*+l+n0";e2kui5F>s#e]Yt;_>&"4DtJlF&>jjI3Q:PVRDQ>S21\4XBp.em2^!1<9U%*ZC7
%:RG[U3NY4t).M(7oe`eF/ABLY2]WB7Zu)6lR@+'lWn5D\Q5f##np-ZcBXW4=2':R&d<:mmQ!7raf;W'KlDjaooS)C/JXe^DQ.t-D
%B";3ldDO+J<pmVk%WQ9oA(K=.'g@r7YD\1`X`>A!P(j]e<<2[+U8-n_[X7tKVEX7(I<BXLm+dm]oSn[+Y,5h:[d5L=<%'^)/9d*g
%<i0=9Yk+NYG1-)VC$mtZ]:1<NCYePqX^:>m(hP)d(35V>Fdg+j'I]&@_F/(76*9J]@TQdA4RZg-6JPc+C3=KdX)dBDYcV06FU$S]
%XelY:+eM#_[M&.E3u@S$c.la<dnSR(s(a="Cc!Z/c!D2'eWbZupi.shep:E._\<[Mn_C8%@A>^`-Ki!T"%8_OgWaFM+4HK:%=,LN
%FtP%bZo>@7"L3p"+oArj$XgVUO=Q'%eXNJuqI/+CeN<&:s)pUp)lrH%rl`@,Q@<i+"!28\2"DcqT'uN,Bt8OiN=o7Tj#E`NpkCrY
%8)GYOjOtNTis!/4ke4?_#Fr50^3ggon%8`]H?o;VmGU_<com1A8SBrL>p<;3c&j;c'M(=sdPa;`X'>HWh#\=1651mIh7ZQL`alAt
%Wf3>S[;"N'8sbssaUq&u]9fs/*@7@JmS(b:#\Uj%898(hW?]!#>1[ei>Kajc.>r&LBKCD`YESH2g.lte\rbc-!&bAoY$T<8I]qc[
%XZnI_@JF`H;QcdVGGrDm+%>l-eC4,7Z*1?[r>;;N>^D(3)F]T[\)"]]Srod^9"klLfiPjBWjLQ!qI`tR+rr(g:AN3Spc0^WkuFi_
%h/Cem$n\[Ug+-O-EOg*=e\oO8V$<u])_g5SQ\0JQK[#-+m,,Pd%;i]D.aTKDQcDGd\s!Wt)hfXl$sa7*(@/lV*aT^G^[,6G!R^Q/
%W/b[LP_Q!e^++?IU!GeBp!1it,"+5P[aR:SSuOZK2b6?5?>G*l`"^k]?kq!F@!uU&qhDILNNW0cgD+NRBZ`(nG[Tkn/R^?&J#;TK
%Sn<+o7Q&nnD0VX^G[j^JCP>g1FP]"-BSE<l\iA)%=,dH=,E)3?6*50q.dIC7W&38ZZoS8rh!3'p\,X%dBtHXWLjLQ)`II5=hR&e8
%e]b^$:KQH'WbHNsY6fYNWa"Xd'f`=ICJ[f@:>Hn2\FbfPDEV?<P7r!`9h*Heh0D60`?*L;<P8H.?Z0J1U/emH<gMWD4cL%P[T[P)
%Dp5fFM6AF/;<[.R*bMXWSpq"c1EQhQp$@UtNU(o@Y!<WjFg.7dH?Pc0%8>ec3*G^Y"p.+1GiS\-aBWO@O>sI'e_KDM>d4aX]mYm9
%iHU?o,;H,*'(>['2\V3Gf&X:Rh_a.s^EF2^DA3kGl1D*'$?FRoSMtYsAR3cK2TR>n+H2kTH8a)aoe]=^Ep'g\]dgM2mLS[?c];M!
%lg=UMTDpdS9;U;A[WaIq(l&?>Q+#YY%Q830kB8`?CtCool@cgQk8BYsMe;k$")bt`2l`bqiU.40I%DE5J\71+bVP5o]?tJ2EjcoK
%rcnUCSP#qhq(Y?;YtgQRB<3XOV_1BD1-WAm941l8gr_klhJjM:Xn/U:HqNha=H/9q3`q1o<e..ge(iZs(t09H^0Bp'/X3a"ObsYG
%K!Im*H9`8UKA+F+ddo3u2<0%Wrrim1B=oco8(d$bEO22n](o+iF=`'L:UT%oT/DlQ2G..T5AcJ9US4^^#7)QdR#%O0Ce*4k,jeUB
%IG"XDX4srh]p2=8d(.tN*(Gig$]J5jERqe%?X#$K];[GpT2*SsEJb<`F]q-SDL<N[8*F5;5\^u<7j-[1%s/c$j0/$j6#Up"V"6KB
%K;br<WujZ"O0W3@'0X!s%,i!aLKeb9]2\:Dd.:;>]Qp(&M/2>Kll&,GaW*H@]@u]F]5M3UPqh/NNgA0fKJ[3'aa3Y!Q(.XBX1K>A
%B):`+>Io)$7=OIJl*X'aco5Mo>@W27cHTCtG>jRJ36afR.c^41oY;.KAQY1>)9#kEM1Opd\[Z:G-$C\833"J3JYOuRUUmmh])&0a
%#3\&]q2PK=-!\IdkGTLu0i9hq7GZI!;jR,j-N[;f7Cekqdn]UN]46Oaot=5k[Du$qc6i-SLM3:\aM*17A9c\W^"5h!R&5h<TL9!J
%dC73.49`OkkX^ZS?'Be[<V1`:q`Co%V!YLq1+KPsMmd^(K*`/R>KM3\,i8'6),8?6@k'8Qg1XXs^N=FZ.q%qG^lq!<IE<Q?/Co"N
%Y+)cq"RW_CIQuJpb"ZjL&`BT@MlEVT(s"8c^\W[2WoE=W<FN&X<-bHJX[2b:IWs>he-&(WR0DhE_OKYO"@m)N@/jE!E"(-4%,5^C
%+^H0AU;$j$n+eqkW++-M3.DOP@HsiI]kOdtAZZ-P@UiZIM#H&cTsd$sPO;nj#nq;\pbUQY0qFFV@]+L_%Ba66K$Y%9(gFH&jXS9W
%\T4If:V"K:CU$aKaR,qN7aZ5:d&?rOR%4*H@Vf/$eS\,LDV+2;Eg^A)BQq7&c9REL1.$4^9MUW&[AuI?g)9`.JB2X&\bO'S5kGeh
%HC=ZM]#>Kk"`-FEi),Xa\e]O\#Rnc_a._We/08/K#0E.bBb&qr*7%dM5cN\d-(Wgu(MP+L`s9D7E[-?eHGhpic7S\1F6*m<A9V=q
%1@d+YT6oCfM;`B.NU*)/8$eOt_.LqL)`c8mG_Nq@PFe+,n^\Up>YYrpjW#g&-YNKP\S`'.Whd0DWU"T-?=r5Hi)+U,eZ.6Ra\].h
%X'?d_gPmC'hUH(PA\K3^&H%,bo1T0alf<AO9>"U^IuS:(%R`(iba!@RF[H-WR$*!aGak;=WMP)Ui&E5=WC[7PY-54Z)5*YOMg0Up
%.e#N;"%C](GR,:`"F$q&$g4\`>HaH]+?8Y<\cM1ZeoqoDmkl'/b!ipf"b,<8%9D:JX:iRT`i943aL0DY?u[SET7\I]e[X\/<%C'p
%emu;/`4\ubYr\$$Yh(Wa;s"1kOWdLBRt%"<f@'1XX\g+I%fN0/Q<T;P)^"<E:e<Bj&j=NGQ^`L\oa--X9(K/tqm'!.>HW/`[I@BP
%Nr&$IDIUqJ$A3,5]D3k(S6U);ghp(VY(/!M!]aRU>pIdL.b6ID3(eq6nWYC^D9AC2c`oj*cn&BLK#mJhgtaR^8DAdI$KG\uP9*G3
%a((!)2[7\"Q5PMNM^2?4fNHj1BJul4Ej8mRp=@N(@hX+?ci;%dQ@<9PmHtqffk:Tg6jcU+<*?KCihOnd@tQfl9,6->$m2GcSZu]m
%#ot7#f,Zp]]!lV,Iju]]'Fd#Y@',555G;So;(liKe/)Wi?/.ZO!C+%p1-,tOi\2*+UcHIb#cpPt.=S?JMm"!Q[ZkU`IMf;4ROjH+
%OgksUaN#+1X4'PK<mMELnBH!T(%>i)!5Yid8f[/pK&^\si\Y%8c*;0@;=>3%gMCsB;2-he$):di)aYs?^TUfW.sd'ZdiJZ1E"8dJ
%NlljKHOqm]@(Bqni4g`+*JHPap%;'=?YT50cS"bmgPsAr4pPI<Vmn>$oEOT3>31K$JQl*9)++^k2ObDPF9_>X43c705.dVgQ$bf\
%Q"ks-7b'm;<c9$:A9l"+>SArNNXFOqJQi8g<9[6r$dQ*W#9T9jhEH4p?@KAr@mAUQM)X0n<u5Z8NB95DS`RhGKj$Lo\aR4\?LmNd
%D8+kQ]&u1[g\pb`DmS9#pdrT]$PlFV\RubMij[qCZ>kA8rCd.[k/MGBZe9V4Xhli_laqApU=W.!5(EQHGB:YnNs`9B:FjD3ro*\"
%>.`>ZYb5>s(=rBo>M\;Jca!(MAN@>:mWLi.\ee"8]mIGgkhLY,J#be]$d071N1JF[ZebAn1]P_#O.W0,6N57&X6TZ75&Y=D-D*6K
%3r,hQipoDh=kp$K_(nE^j=BHein<M(IU(d3^KWdX0=liFs+AupOfo:Q'm'-Hk/O`_DqRMYFJnWir(@^[4nr@=Y&<-R=+YAbUSF*$
%%0jb_EjZ.qK\mQ3.]&%"C9_a:S?-Ws$hf4LpuV(uV9Qlpf1@.Q4b!6>kMF1(V,G%GGI=9qg$T#Jg,)jRI_0e'lWW]!:,T1-4F=Td
%?M`00G)m\l7g'lMY4#WJY`-'jk4<37W'%^rHEt#ol<esc;Y0k;cC#]\/)047jdIWrX;#k>Dh)m-_pj0O)qD?"@C6M;2YWdoXt6Jj
%h*8DY35"-SfIUiWgj<7/%UFHO8TFX&GOMM<BRX+<GZ4RNAt@fU9_1Gb/-&:<]uTl//K_[8hQ$jDl=kYAaBRU)qPLi>R%Nj7'j&Qt
%&!B"I+545`LDR\O/CXih0i%1T47ltGBsPS4D7hI6@/UJVV6=\nlb0\8')^$WHMY"UC_`S55N*9hIBp+arV#diEDo14oBjT$=9a)j
%3td4m$3YG?aW^@M*GTZa`5NB62]1^jNq^Be<f)iphj0.4X"V2Rb2nEQA+0'_X,Z;]PGcgu7AUqDgop'5a-M]/&G_sUhh+5F&#FJW
%TCjIpR.0f@l^(7%>>WYTT*qO0D\gZZ8l[&abZfP'o^q#:>K.tZ)3u_BQqM@,kM8n=fkt00G1QBD4sMZ`DQW:,#9PTP`Qdnq+>s$n
%f1@Vd`L)Q^_(t=L:O7pjZ#7S$Nk5LF[Yu,okc&d[gg!)3hMmP>]"MNe%WG>k^#8n%p)Rs27\069?],+[eN42gAFVtO;;oARr(oF3
%2BE[`G'hn5&"]jq8/Oc@3Hhm+P9#itDI_dDJm7q;^:=-d068_\\/H?8^NpLZIu3o__V%[lQnM488YLJ'Si#[;5&A2\n&\ck\_#Yc
%nf`I2I.,/W&?lSYOmX$p/f.DfldZ1h)r!>VHeTNpGHbEXhCWr\>'Ec[E,"-R3C&f$m8!8S;!ZUn;Oo<[&$/:q[\#(_f$h#3=0SS5
%+/+e`/Nqe_YTm13rrbC-L8t]oO12\JeZ7otlV;H-p1,md':_45mR>0Cc1B1=a4o^O'YJ_sbA8^IV,*6uXjV7]V3O14f%pGfHXWmo
%q>GkHJMp-6bgc9;Nt6G#=$CmH*S+GUomX*ecTr:0FSs%7a8+r<qkF?HUM4htiFMQ4J$<;4rI/SVR?5H"MJ(>S07>2+0M,"\h74Xr
%5QNfAfNR_-^f;NZf\s-^nn>o_K3@#FQBmR^:OnP1hSL%XGCSlA'@3PVdF%MsUJS#)WZlJ-Yfh%V`J`n0a[XC#6rs\ao>_<ks*/I'
%+g18NH0!RI[8Hn\=m`K#q;ueL5BsndBV'Zu*SCtkgb2fkmXH[Q>D:m-I.n=#h0`\-VeaW&ji,(mg%H,Gko[jT;B((D;*u+4,^o<F
%G-+hjoa)(o.ho3>AlD,;.uE_t'G%=0&$6Iffg$"+rNW1If8?ib9/R;c"rHWu@oJ!Z</t(Y/dT`'_*gO22DA"HJ3cjHc3P0ukSW(*
%Bf<@-bqVa8"FARtoMH//V`a5l-k0A#X+\PM78;>NTjralS?K\j6oZBRb%3JQC_R,HNob1kAdiV[Q5O'7)hdi]P7o-.Wd]gf+hZ;p
%RS#3GV1=)-qAK-OPi.O4$NljS8\E]Ul6DY&OlDKh2R)eU`(S4qT]C-0Y,0_`L+DX66'3N%C[A\uMQR%c(7((nHnp5O,g0Bk*7+Jt
%.B'LnF^S4c)mo](\`mVk;^K*+)2SrbfJ;b*_ulu.R&G%A&u$\sS!DbI&7^EKW/`'P[$6b=*Mj2O3OqY0:)Jg8S7ij^"bQ<l$d;-<
%oT$1Aip(l/nn4W@^Y.BRL/B0V4?J#n%d/c$JGk:ahn3VJS#1H;bA8bHSH)gJ78NMWHES)BP*>>(j3;`,i6G6bc+E/U[]S?:Hjn7u
%(_!23IONP[2__-6XR_Mi]U9oG1bW>,+o$_O5$f1Gq<K,GPK:JN^I(jb5>"Q_5/8p>F3!cC/'DR#n\qj'NkS27P"(4dUY!mjGPeDI
%[(Ep%J$kkaL'oRFEu[AAi>Gj.qr@5@BYP*#OCuJEY,ab?5a[Gc=[0'X#NDpg?6;Z9Vk(`b:AaS5;%l@co?Z1=Mmon:LZYhS?F\eU
%m&+^g'CL0$R.=$u)-Z+ALDJq1$?A-pBS!Mcrp.npMrNEjcI$Coi$5b]V=+TMN8)q>O5m"3CI9CM7ZWk"TH\D-&:YM`-cL"B:C=LJ
%hWjsje\X>V^5ku2bL<Z/IopP3F=YLNiZ@MbrNhq""e*b\])iN3YtQ-"/Y9..HH'!1AO$,#%c%'$_Sst#_J8K&P;UXhIT#im.[M:V
%q*[ZpW7,iP*'>Sa^oI)kbVJN?g#k,j6#p8Tn_bi0GI7qkT%>^d:uO]iCnQ=t?D]@_J5UM=q0MTg/8i/qcQHsU=ba?Glj_8;lHZ/#
%"#14N[$"Pdl`9$ul_Q2[g.B\<<%YAW8Du+gKTIXf0,kESYM3E5o&]K'HV(3aqe@^9=+Lp6NTL&<*s99`]+_q?fE?$I?bPNWJDU0W
%kgdkO2bEO:<Er?UhgAi,QbCiMA,!rV91@9]aU.:N-1[pPn`e?QdaP=^'-U_To>&BDMth=2#ortt1UVM[0Iu`@^9jKe;&<c[^f[XD
%eIAl709P07<*f][_@`jKlD;#nohs\cXo,5rB5brM`<sZbk5(#1G9Oo;\C3\<IWVqsr<Bo[d^D&@h[,,M`.TLr4Y&t;4/31^e"0ie
%HGo(;'rY5:k"?TS3:<#+>3>)3qWio^/ZE?mot0O&]n:7Nna#am=CJ=L,bHu3!9a08eCB2N%a:j$PNLP@Eb!7pa'p"RZXqq3G$bl&
%r(].$07$GWFjd$(\$6,DDW>dPkiC,WI6B$j+0;<:mls#XSh`Yk5aut!gW&dOaT[e@H1TP?knWfFeWnCeQesElbrYRd-B/)Q-@uN+
%[(\J7`RT1uRt@FHe('BKb?#s'LI8ONI)=FugF"UWIOi.dIu7j?cQ.;q`;;^p"-EDa;d+M6SS9EE8KS;(GQ6Oo?ut`&pY,Jso@*<U
%[<IHk(";%k`",Wu%ujV;A,3h4S0lkS3U^]669*l)!"V;q(Xpt70)6@@]j9eB[TUQca*W$\qYlu\mP.hXBD5%H7cSR[m'qiXimMjg
%Y8=a=dDo/HT`/W?MrNF6o7]iaY2N[$Zhj5eFM,5Bq_;=n#(L-&Zb7"FU4^A6cYKpA_&74jm:54:k4LG*oOJ]tB(n$i/Y?>s-gMSL
%K<&0O^L%#>cgP\!Io].k"lr`<$;OggH1Uj$A_mW-7R-;8rqD[gYo,_D\7V?#DHgicBlXgLQRd(SauBKs\btAK?/'kD\_[\<@H;Yt
%iXL#&K3-=<fCkpkCXq_7pYd_H<f0BAiF,VT^!#WL=>o2cE%`oHjmTV%[Ja0L@[aH9L1H-92kF"*I>#jDgkuZ'2nok2aLt?Bp11A5
%\X"e2]k?36Xhr8uRqL/doRspJ2enV=`U1h,60u7l\jP9QEpjJT'B<)u\FXMqI/YSZEX/!g1(WC<_HVM05<:<dhtud8CTVsbS>=kK
%2&10;EON3\M6ckqj3dgZ',:"sdcp%P<khka?jhu:gcnD+mQEN2%$s/C^3o6I-uCt<d]IEO1k*(CbH1(_fcR!Lis0f)7-<12S9L;I
%[CC&>16jCSI_&!@T&30Jd:_qh2n(M'QkYmJ?(#;8n:m9,krA7O_t27N)IEN6Z#OUsZjUH(V&l`qQB.ls#'&AeRqJ(W)c'[_9GH(t
%`e+kEV"*QamS<,]^\dm'P>BKA9Xo-CYA]`Gr$P\1Er./9-`*]S!PQ`)g;b4-O93;%I1INX&##G%bma$Q9HLl3kXI5^RoO=U-SJe,
%Mq+kI\aRH=?s<c1^OLO3ZnYM$c*%qd[UnRR#?/B10:UjVBAlV!Gl"qY&FP!aD^82nEL1^E"%%VaJ-U[A0+4hQMD&:PX>1mCH?HTX
%Pg$JQA1]jT/%GG!&IcMGWqRcqT#TVRb:RUulO-([W.+4AW:Tfr'l1PY@f%c)\d!?+`cCP+IBmR/:Oqtpe)\g7AJ=(Yf/P1c?jG@l
%@6Zp`[!D&ZMiUs?l6#n1`:;IA_S?a)Vo*hd\:#*G(S>$j98Wt$8'+*@!Bp$44l<X,&!#A.gcL+3b3u'W^rSaO=,>f/q<#[hrmBq@
%Yh+LZ9JV*L?6srCZe`6PSAk8GBsDaU)0Lfs82$aEr.1484*]lcoue?B`n$okj,nDM%sP#j=MKZ\(]09dct_@%-0^a^iReS^oCa9j
%"9J=0(!B*OT=,ND4pN2eQT_HlG;o=+,-Z?br"D-V,TkapgahO]0/bZGIHiCCPK/`M4n+K%"c+unlZ?aLSq`Lhr#F&;H*-,,k:3'+
%ankR6($?*#RVp8Pe[&fV`E&pYRRHl"VgEZ^*Z^f[c<*>GH$@TpX1Q2,c%4SrhYJk6Vm87gbZfFhm'"1X5DY>GYH;48j0jm#=1&Oj
%Z1nYkXF&(@]nPs%Y@)is!u"so^$>%!d6&5*7M%IZ/#C_Wo9C9k*C"fG\Q&R>I5elDHD&r-.;>5Ho'GI"@!>>G!uRD"gOMZ$U4G<d
%!Cf8&r#OS_m?c6lP;<*fIeYO@ctfJ_du,@`Jq.)6h5STJ@K>[M?`M0(^)_#*\#Z^D`LXue"OC#Ufu[/l040j^<9c["^*As#_;j&X
%IdQPOkE^J)m<_it^?+S/itJYbPq,d7c9&_BZ2JZX@piLHCqsne*3['REnX1#I^-%PdVO1es$7I"-Y]Yb"5NF*&du_@8$E`s(5lf9
%>5,\tMsceiUn1r\?`*O.q&DBBH0h__=ZXD5V56K7fT-q/3!i>?EZRD\L?@5,X&6+Ol!bY73-s?@GFP-nn*Urum!Se=9K0]@<D6m7
%_,glcp/qb[aer-Wm<&@of&8SHK]qatoAl_EGpV-kQlc!ok]sOB\?Z]d_Z<m*c'=1e(0o_Mq@FWr.\.VNDi<fHKA(i&P=eO4057qa
%b2R4d&Nd5n!KSuD(EYTM-dfbBCMg9(C\DBS4n$!#*Yp8[nn%?2D7/AAfVPtIiG?+O;ju4t#kn6pK!q[!"Y9D\Qo3P@%E=3InA.?g
%qKt.Lp*)QSHj+E/_j+]ZM"\WY*^>N8f/Ha?gG1JE3@MM7hJlO1K.tQk-[g+rFrr#4B2bh5(!ebfaZCL"j-8]eHQ=+bGJAH"^H]<Z
%")B0'r,?/T[/;qu"(SG`Q-pt)JMmF+6_ZaBrck>cqCXpaD>3\uf)(Z^=&PE+)dPgZaWR0XHiiS\-+W3H?TilC%ad(/fIstZ"HuNY
%>-A^R-rh5Cl\"IPCt[F`ab%&/dIjQXjl4RV1IK36F`*W(S*su%=bpTsf3]Ja>]rS.9-/I?D\UNdT9gtR1c"UG21HTR<r%!@QZ%;/
%?@6u3-kX7XJqp0pn*ZNMs1*Otg<2SDaiX+C[6\Wi7)u.dJ19rZk\K/T,'euWkWp<;Ee9Ud'fEaM<j?1G^\GA5ra+L0[o*BF468DJ
%M?J@Dp+,WlpQC;9$d%uj))jhap%EjK\?g;'eX*F_n!>N%b>g#bG\]J&bu]*2+SS[YOk]*COam'`f>"EZU>piT!g.13!qFg+En$&r
%6p\k*Yns2.c1TDdA&#9sC_f7-J$q$aE)b_"'siJV32j\`XDIs_I9pY;H*F^2;Pd.a3tK1eT!qW[pPr>3J$;Oh<oVYf7^[V.4Fc)i
%@%ZHm&S&.D]CYP9m[L&nQ1%0%r^qf:^3cdIfS#@Fl7N2AY>;V]h7@"Js6lp:&F;'l/(4$2H2ZZ?l(RgY9`s8i[".$oKE[$YB]!#^
%`V/XkTM5?U;>A`RF/B]5//Q&_bJi&gdm*i<8A0*,UYKa>b5J&XGLY*u?Z-a%CH9uC"F;j\N"bFS>!DKc!Bn8;M5%2SHM?#5s7q[o
%7'3*Xp+"ZJE\$qJ$9Q\J?1ufI]Bl8>,HcT5!J/q3n8kg["BeBG,?Na.%,5e/1AiaT-O^DFKK"WqS$l+"dtKZ_/%1SL6Jk1]9Z+sk
%Su(.7_p8RblTgAnG<?+7_L19d2RL!i0JLCL"icsB54Eu:$t5jVbGc8tc3H8/VZo22hKDV[#0QaI,9M0(Q'3?#G2BGdCbX?D(_X]k
%G+b9j.rW;;C51*VRk?7jY7h%ae$=?)NGK.+b>B0]Eb^0<=BgnXUE9n(]7EP>"64eg\)P6(JK#`V/Kd^Epo;S^nrAVBn6pUc[;r^B
%&$6D/otA"J!3EC;Jo0.*[f@6c3]ZjN5kG(33@Mh?I0Q:53HXhp"-ep`LH]*\_#=oGM?`-=Qk)R%<c+_'GK_1+e!O0"FBkkb/JBDT
%2a%>+C1%Ur5oNdEAq@Nu>7bG'Jf1KsSFoS-_s_RQ4koTo7HCQn1]uG@L1PZp]Eo!2E3PDf3POJ2Ne(7jUlFALbCW+nj8:V"])[Cu
%$_4k@0]3rb6pL23T'8$>h9[:M"CW@G,+GOhH_@WC"45-iiKBsdR"k&A?,XrPE6ARTS6S,I@/Bqj-%)Ef#5Ne,)-X&bF7Z!dX'%P(
%\J=b=j8gEo^fTHm"qIjWV-tZ^(7<:A"_i_TQ\fQSk_4T.2*=#gdkUAcpk$;e>oU1'l7aY"IK32p32.V'J;OQ(,TFQ\j@ok]^&l5o
%;7)u>%/:SF6f0$f`#W9<0j+e_'urYA,$TS6(/RC<LhMPZ)^qQo@$d7bV\BE0CCJ)aD':&;/Mn%&klm+(c-6'NBBiCrc6;(=C.7&!
%DDhqXfcl!6"*GU&r/qZo"@]CXRV(QGJZK=%g=Z2);igX=iJ4qF!mgEXQWia;^.T&;#PK;f8c`p!"Pk7K"u`Cg>IBlmRC><j\J5[m
%0SBmCJjtK?OfNFMn@?C;QA$r$^@-hB5hQ2a%0BlULQB=E"(oO5oVQ'U=$?Zd"UJe?/.:B;ONJmilCeisoR:\>G>0I7-Za:f+b0,Q
%*Dga)kU=egK7mQkdufmd93MT<,e8YcRY?[Q49nMNL^2-^aaF/AMX1&;dBZSIq:O]i4kKFKQ>Pan'3.(a?XW[4PQ_9BngrQZ-6NEe
%6#1I:j9'6ABZRt!8X@p)W(2EY$3X1?[KGrjJlK,(37oC_AaA/KBDIRVaUCFHSY1Hq'@6a"5m'cf#ghZu*CDj#,_Q:d&SmK*)>WCh
%?=5g!9*,N0a\Z:62iM*9(*#RVU^Ho$lGO#]7l>mQ"kX9F6m_nQD$/F.#Irjq.u.g?gOO:@lOkt(&Xk`1!a7-?o[H-F)ZkpH4#O]c
%G^2LV4t.=Bn-Hfj"6J&K'2:I;")fDLcDlo-$R4OhqK/rg!o*0NeH&tW2&(#073E_nBkXO23AD3RP$ULdc))m`+8db`21.+NY2C;Q
%29cjZcIpA%$.+e@O`NE?SMnU'BXGTo[68OL@@t%fE52t1XJ:<VGopRM\U\)-5s!+33+/h/>)S`f4-7uPfGc"*K[oFf3)(>O/g1Kd
%&K)_Z$;f-%"2TV2d3VWF9H^&qm\?-V@Ket)r4W=X>(BA>Jk@m+^u[6j5<6>$K7lLQC5AUPR-$K(JS*(0DZK`'igG?9&^?f'3g-!H
%n;0JDeSHZT5"Uo-X94RmNDODtd3Eg?VD^SV8>-4b?c3OVLrmlL%AjD)Q;<ABcim%A(0Cgt=Z$\JM1b\V#)_Zmch"sN<?Qh2o.\$X
%rZc3o@6hWTF1"d$]3/`ZC\)e"hR@@6IlT2M(>2@fQ"gnmbCLR\EdC:\$%\o%&4(f:L3/[R"Y0tp!&=qP.$2.s:lUKPk=sAE5^Y7!
%%djbG1.db`(5l$1)s@=7R4niGl/]2eoK6q_)[HWQ2PJ"mo%?AL>raR9!!ohkJ>_<>/N=6aMoS.<dEV=Ql`7F]E+dg6;76'nPm1Qf
%JYcNQk]3>VTpT/J5lr/82+5ba]*o*ZJ=\8Hbp@^oIYS;?")h"JCtrl^.lJUU"cS#HAj/SS/=Zeb_h=%dF$SZ""475>$:7H0'^69h
%Kk.((K\lgk6+QgP8qY#$jKo\]HC[;C#a(4jCkeB#C^l1]&6+5]FSC@u@?>I/DkVa?-$g7XaDN,o*f5iC$A2Y(m>nt*-o!75qi(WR
%=p4>0TSB53?]mam+K74`dU23'8fR4#/f<'!6NS+gD)Q!gOETjU3gb8F%0A5YVsTlh-o5Yt@PRq3D6VANDCValjpWDL<!,E-IEX^6
%\Ie?7VVpNdCEPkBN.&qG-pU3/q13h@?Esm-5`euARg8Wl7)2+gEj1aDLrV?NZka.^)Q4gXjqi+N&-tl;dk_*0PbWpR%Zd0#QX^l1
%)F:7Z`F^4n"E"^f.'O"m$lp3[5hHL#@._fK!#fN&5,MY629n]*!m85DGn`G(Apo%<?j2+Bi>3>E"fQ+NJJOW!cdKF6r[IKIWBfq^
%EY,V^4`h-iklNE<KnD"uBaC`l"W8!WP#Od_c0,_U[Nia,Jml+/)72QIiYtG-cE72VTKhgpiF.6cUaqbG!3CRMeHE\nGE+`\i'Lk1
%$R00q?dPqF=9o9M$8e*q7*u$#EdCZG%kTI>g/pa,@(s1[#4)W=Kd]ZJ`(//"fCL)iM<?U@K48ZMd6qn:kaN&?MFU7)^3.7oJI8`+
%!4=/)L)R,QWtl:h;34?.%9#7h5IDJ^$RX!uc\'X`4G0M7:!hptj3kXG&b\I%Ql(:`"@%h67:lU"bTr4O$U0j,!YM[*3;Pni5phe<
%D$>kf;5?$.@"X3JSgY.%PgTO9;ID#e_;`0D3r3*K*]-GToL3'X0-)&meKPQ$,;hU6$BcG;$q[j8o)<7Q_U?@FJ1Y15,2Ei7Y,A[2
%&/BKO4jj8L#gp(_ef7MAJ02,bPjeZgjAU4-1ld,AT\]hFgG8nZXA<P4O,]E?T\]c.OjbF=`u(Oj/X[`N-k-2dj"M7+NY!:`osaVY
%0W,LDf"el$@4];MFTAfrJVG)Dj/Wq-FA\,jiXJgHS+8Bi7nS.4=O=B3nEbehM@Bsh30XS$D=H#%MgHJC+#%mh>:o?5]auD6M#Y<[
%F7?76`7/u_-CYS,0aGPqRXn@K7`"U79UWsK+2<mae;"5F5M@Z^U"02KcZd4`Bop-Ld)2Z@!a.?W1'H*G5aFo`"M51<m@2BY_%@*.
%JTVtd&'h_b_5CH>'&$.k>AXg@('TO?hCt5$S^IN4Cr&Z(rIAo3Zjhl",Ej;_"G/pKd@-%d6RN;M<nkW1*`Fl%!]YcAHFXm=TW@-]
%A4)1cO$tKC[p[B%g/Lf-.V%D:`hGt>YUE+J"@@.]aLJAU"gdtX:.m[i-LsE1^L3d.lY*$3Vp-E`_mH^`R02anW(b=VPlRg2M1uqL
%j/WrXKMeC5ndX&.'.Z5)'-2@=@tth%!7\:q\h\ko8kqY</Akr]&MFYV+Ae%USjA#f8',d*Vh71.c`B]O417h(3$a<)*//Y$9g4s<
%^sY](A;6$UC4=AEiS#1]kX`S9d8CL\M8k-]$ts:SNo1l]VV*mK(a$Z_?PV$1(-/o<2Q]PYTLN[`WYH46,TMt^K>c$M32b*Y!KCKF
%,R@5bf30n)!?nG_ABMep'';!_0X-q2jg^=AKS63E0Q.Bl+NoFo-J15b'C%pcO2)9;/qgEZ@2>GRBoi<:_,8e4%'k`Q6Qk[$oo<F\
%+>@m/l+f$,&&H&m-<MVH[r_VX-@pmiX.cTFOCV4M8E((Wq:?XB3gt*mhE0:L:`]`j2F^6;'b_Kr)Ta7WMhS,A;"^-j"j8S.SdRiZ
%jE$AC_"/qe$0"fE5LIJ[^'F;&aJ85nI"r]GS-B>1+CWoh&<T\OT7H^gYV!O5L<UK4K46kP[]8YH"7)+MnpMNDX\#1Z`p3?!73l:U
%.$AtqFT1)kW*%EPdAn&YOq9EG]ZJ0H.=)[N<-]S3r*^-3d"F!,[*,d%TU[$=$S\<^EiR))Y=p&$!nm@RO.76G1FmuqC44_:n>\`a
%T38&0U*C?.KUE7deL,o2"/ao@>7*8)KRKErOD5@mX)SJ(27ju]>+^pjOG_^hru`3q\L$0JZ*Ftb68tn4#f)3s$[idO!AOBY7k?c7
%5q@m3(;QH_2e4.N'9$o^#CU2,'8Bbfi[r1S+V7Wr*Za_o#qQJXK5(EBq7`P`F7C1?puLcaW@fU$S,r[9g]GHmneSM7'-<Nk_Ml-D
%`3&"PVD]0,+YoYcK!<cJ((W73</Z94%9+1Ekli(A#_H$n'`HS-V5_QBSrNQIU]bamL8hYN2AU`![_^*9$t`0<Zc!mec467?JG:'!
%+Padqi0gNY!U&1S'.>^L8F79Gc_0D*o!p1I)A%!q@d19=ZAGk+G_g#,Fi<l,,-IH\^dN0%Yc*+c[([$>Cm"51JNB6?IRstPKI#5)
%D1>W=9F2%A$(r'1,Rh1s/m;rAMW%H@OflS5g]:>gL3PWFEQ-'VoWY5j;fb-k%T^0>-6Q@I@R=-*ohaq@\#lb5Ec8Q,YUW22P8@tj
%%G=-@&b$<*oRg+5&'niYpW;Z-6TTDK&$1[s=_nHR!*,4N6]KXC<GP.2-qGWRL8k+:!X).0('g).a/VfuE#cS(H)lY`Ib16`LbT<m
%_mjmlb@/!#7]f"^0:jjRgP8?bLgO/?$b@"0,1T5W$cEQ,C0!uXY@(l5NWoch2cOB-`1i*$59.BT77XRpi!4T)FKg8-d..ClKrl,:
%bS5*m</\OXNRVrJ91Yd*5U>TKC&G%)WMQS1'=72PGJR3*/'o1d4E:!VY5Wj21hab[.FVm0_F7hE_@eaBSPtY.$,J<09k\PU0FQT:
%0MUL)0rh0@>V+D40Z>4Y!LG(=%6]=eRrG<%a4GW%0N`c@K_f4#*r"@e^oA6ud35.a:Gk]he6!_q[>6)dKLF7+R)Zo/BO#*L0]D16
%Y0F7(=;PQ5XgWie.AU5=e/;'<5hc:[0%2!e*iqg2m#=f/'o62fT'P<cSSWo)aTgX)*t)8t_[6H;e;,t9'8#LB!sJ3A+V7+q=>Z-B
%$W&k^*=WAWeRl-QVjiE(Yc:.biGPTFV_nc+[';[#EXbST"c+G[0TCQf:oKNX\B1`:qMJiXCst2J<ZA*E!nN$iq,Emd5.0j"7I'X`
%Y<N74mP,<lZk]MaXU-ga5ZR&`/Gb9jW+;$KGaRE4SX]lk-B_Z9'Cp9G8khEb6K\SW8#j^@9k$/f>le"!pTKK]/6*62!*,4N6]KXd
%<JsDb-r;2bL?\X%:<Z_l!9M;<)F]VOak8EhXjmGlKQ)W+@c`+@dAhhX+FaTLM]E!%G^5ndJdt^m=q_[dTc-cqnL,+CeMpM[!NO40
%G<uCb.`4V*cQQI?707Y^-EAE')6h@j]5K;(U-=HMZo)^5s*t?.*&aoj@N^HkR&VGX72-`)DSlV&kaQ1fk&W?cEFg:?QBIV?9Cc+2
%&0V)Y!J"9;fi]YfT$OitK6LQ[()(&u^lf/[JuloK>ReV>"g<b^e"aFbXI=iqi*gUNlj4,%d7!42:t/`7MN486&B&+HQQ06B@gq,C
%!L#)JGVMr`;,/_LT`C1m)Q)e<NpEO?fMlf0Gg*"85o:BZ7_2U8U-"2##RF?\3&05VKE[SkT8o2]GS!T)"t#TnM?^_'#M];rPaAk,
%QQ<*Jag#:gduFb8)tfYC]8UEr1I1T]9W\sD/YY\!o9achL2$<6B;-?>_'D6dTX@&u1GuSU?`bqp1doKYWE__fl<#T7*KZh7Zpk>5
%+O!)!9frRK>^!`HM3NZVDYqYhLFtut)#r5"`4-ZCWYSG*-@3.9+R6[kSTLq.SIi[@1T+U\n&</B8V&?p6k,%@BoSLVa0_/$$DW-u
%[ea&.Vp_C1;?E_!"Rp0!L812EO@$c+a>HZAhji.pkl>ggaOjCj`PoD.XcZANkY0N]kQ_/qBEC]XoB;2tb506&"4Qua/kdmP.&r-b
%*TL6Z'O5S6'58Aq"s-!=W%?m-*G!S]CD'n/6?s(\i\J^obAINM1#R>WQmiG_O#[(GJjbaiV>sOH!dZ_#6W-W3M4n==,TA(I2P'Wl
%A^2b1@)MF+n3e.^LpsQIVQ$t4b/9rGAFt%no_2%8gOMXDdh%8UmO,oP'uLJPb0@S9:mOR.@>u&V=Z$s/QfmqN*jpfVV`"b9ZQhbe
%SJ9L82%!sC7-S1pp6$H]*Bg$-+OtSlH%Mk7>SgY1^nc*!J6J.%6]KXd<JsDb-r;2bL?\X%]M"LpYe`,I\C=rt(),cU\$T1o.[a#b
%GG*DJbG-&7O#KcEpn/%?SUj0$(ecXfY&!1,-B-V3frpB(GM?\Q2ee2cL+s,bVa1Brf>U?W%:mjSBo`7464ELH=OS8D[PjTe,'=,l
%2;ET;P=CepW@!IT)QRAKerXE>O@\@?;u(W!.[n]a"Tt5S.Tgji[[K-a5\pQ+51g8cmie>cEt#>kW/^;"R[aj0<<EnK"'*"bio4s>
%4qJHubDp2A'nG?gQ3o&h*'B\m.VmCg-;(on"j$Y)*BgL\@fjM[6Z3Ze`r8uSUSO(`$(P`An>h+$Sn\9t&-[f]g(86[E7<BK!6]Zt
%=5;3`R%`)E;[kO^H&H^-!Ss1H,"*!P/3.'Gp[k]e,\Rgp@!W1r;#6bI'GEk=c\SMWJ?ln)"uuhmlkRk@oYM?r<+1"E:gp'_LW.I\
%),N=2AgY&iUTKCk9Y16lJYtAF*7Re*=1*c.M?H=FDOA;o!kHO/A@A]1@h\MJ,ud,8Ct$g90`qJO*`EFfL<Pl0nH5IL\3jq>*LGl.
%2\'uBeq0SHQJZIF;/KG_c_niAn8-UJaqk?j.R>>]#-qp:]ETF<gO\2nlh9hf%rF?i#S4VbFWh/(1"ObQ<)!E%2,qUsXWbf\+HaS]
%VXj1HVpGVY(^h@gb-hssN=HjJ.aoV&`&kQ81;uR_@:>/9lNT')@ku")Y$6ud%1'T]ki4@_2*>4.+r?p%D,.q*:fWC%c];n:+r<q>
%pj,.IVG6`/@Oer`a05eLKMBBe+sBl:!dHS#a&+E2M'8RS'H<q9D`2Vcrl<ar4jS(L<X#4i:iCGB'@VBN'.VnUdZ+n15_2bs+`jZ6
%+8A5+*k2Fl$#*,$!CT6)`hHc06CsC'Mmsnk+m!SE,ZnfAG78-rM^HShG^3c2m,m=+pT?[pSgrBa26`s9-\K.."/hS5$>QZ&X'A$?
%7"?HF2GE#cFD<<pa"ceD!hV\$Kl6<YNNfb)HSD].D$0&@bk?>3#B/0NR@uoBc+uoq!,;]BJQ`FB$%2n1l0"K42H_b!\-+M#P>a0n
%o3PZtb?N%'QLHT4DF$.Kk]br6JXd'V23TLCobC2CK+2/i9P`V&X+;1LC48GU"bRrL0NEVYiK18*k&mJeM#lbMSuFROGY:+6-mAp4
%hDcK_9o24>6)if@)([,Ca9XbUXG_:7CFscm4U@)eLj1p2YH6m,>aZ-%J:bW"<O<*4d=QY+&B#9hpp(KM;8A>>23iqV)ZqU"QA&#6
%"AEUi^oN#)NbX#/$3c&)f.^3S=7EAW2*ND-14>I>YsA,Jndqp*Mumus^d.H=R!%ot6K/I2J+'V!Ah7ii]RU.:_WM;03NWV2+e>iU
%XQ9Inr1PHP&K=Lin:=CK'Mr([f;#OG2ImK_@8QQhJlWmdXCCoTI6,89f@1^@f>'q;*_n!^<)!u72-.b!/KtKG5uH\^VXn^ZHpN`'
%nCu5C#=@lZ.qVCi\r"MEa)KuX:]Ygm=GsS='sA1;HQjC2X&r%/\KQ)p9gKgN$FHLmKb_)28B1-F/?5>HEuH/:erU&]1.F1lA;l):
%7dK8hVsF5R4rkCpiR9g`fCeXAA0]IZdolkeC8d/p>!l+T!?t)o9]P$#.CC^T7E>,t/P#p-,>2gkRta&.H[X[C3BW4qpkeJs>b3<o
%:#b+`",n?<g,Q2@Qt1Gi@tD9pi)!jCCZ.og)!JMtMiiMiZ\$QSEuk:1DcbP*9?rdj#Ne8;RfU4dQVKU+:+d8f6$P[!7IT;V4H+m;
%aNU=Pn'1H'lD%Dr\Bh\:\_F1YW`5fqG>`]a+%H)XKi#dgVSt2$OD[2kQV^K=89_<Fmdl^=H@_lUE7R!QQ_@H"7EfkSNSjJjrpI?f
%%NlHTcdd<%F<WLh#:a1^Nm&:giGP_(Hnsj@AaXi9R6_;YaQcu,k6XF2::fAjhg+/m9d@1[V"<&-XpY)SSFM3V8g<_Te=_!^iqT:U
%gLpj)OBD^k\Bo#sd].bIUpC?>@Cdf'c!lR?nJ3Xi+ufeMs*+cDKlb7dHj2&1>?=DF"mYU)E@@kVp/F0%D3jERd/7%bO2-u)"o`_[
%Z"?,oElf51+B>-BS21m?:tYlk,%:A=Ul"8n+/Hh.i]qJ(*^*"d8P28'V=)F_ChH^#OQIOQ29s`@Qr.*#1Ylg+(Vc>-=PscG:_'V`
%dS:i*P`!PIb%11.i+es9,OPP7fa/1#]``dN[?bf?S1eL.)/\E0-K/Hc2pX>:cP!35KqMIN^SHV-<+QoE+V#g^XJF1*U9l;>,OC=9
%McAas*%h=dD@^b"?$aU&W<rim:;_A;HsMOG``4bbX`f/UUK_Vk+BHIN\P73BB;"6(_#+m+H/j`MC=<JS0Zd:=0I1Og"GT8[,XC:M
%1tK.,UDY_[^WOKP<(?"A?W*Aj,.U?tUS+lT5"fY>Qt;+]7*UO6`mMe!f<1l58533S;ig2IP"rl>j(qGE=iD+1e#bP-\:qAE7tmet
%MMBF+A++u+fG7&[jdIq?PsIai$sS)h\Ju_idrV.>'OiL8W<7Xa,4Cn*kqam0Kj\c9iYYY2$C]!`6"_Lg&=TAY'YfI)@fgF0gmJ]j
%g`GN#>JB25'au@YL@`F\\e$ZVX((3qmJMtdd=6FP=CSDLHC8?>G2da43^Rk<LfIuDN+3ugedMm8YfVS9DW7)H<tJ2b!"5Q$4BUVT
%k);0kAuk:_3d_rDCOq7U)H8i$31QJ47c@K[lqr#gNL4[;P/Bg]o&BOlPDB$]>QpR"7PWGQ1!WUN2`mB2AuaCU0Ac<uGK3@,qOs(Q
%[%DI5Q&&>4gp9'$d5)tQC?BHWU7-*]0M[7Ij)WNdk25'T10-E":/&r8a&2`Dj;HLqa+HOhO3AkLT^G?d^Dn.h_ImI12-e'<%HThd
%XCK/<-jG*)G@A"?DnQ:EN+.)PA"9,#Y;S*1Au4%FY<)+/T9CU?*`/'=Gpj9O9']d?4k)Iq##d<\nS"6aBJL'P%Q#89eg+7Y4Qd!N
%0j_R)<Sdrs_Y<2#&XfU)?`eu_li%6gq$Q*jBISB@0?M1g_$1iC-d/"8V=*,5F&^IV4pg8_c.7QX=]?'Dh.ktorL32tEX>hLEehf=
%jF]Le`9N>>+qBHD=/Csl2BXtnm$p,[S<'J=91*5,+(AR43!iCW0]a$o@C5?`U<G6bNdX);Y"Yi%?D`U(+]Ob-&f8s#f^_)A^PHqN
%D@j^)j4u`,5"d5H]Oj5To)o5VjO5g>gO)_Ofu5dfj/l@2Fl\6@1k;<!dsr?_X@?`&CSoE;QH4Y5UW<VW).u;jDqQ_2VI-V?,67g*
%6q2bSYp29l=<?DP$!O)*.ddX!;AW#bb/,\aQ:<;ZP_LnBr\^4</)3Q8$cmLW')jKs.>(nAjJeSF>^tdmo/$bc%b&9g[TN5d%SCsG
%L7a2[NgYTC+E#u6a:Mh;%\FHl(F+),2<8<^a>I*=;I_.t4J59/OG&.>\=rV\F(4%;9!]cg&V2kEMntl5!]/9^%)leCA;CI2+8[7b
%c?FPJFZ>&XUuQiaMjt(hQZiUmUm!LXgK[I+)oWM2e#bNW0e=6)!U,6-)Z$#sVN*nF%Pg/_4;S;l@cOKcm.63/f<"0j[]=kIIBGVb
%JN-9]g/JY/@D(B8EgtH5.YFcB;S$*Hr\P?9Q#g1m8HNh-VqU,HiS\)0F^`2HrgiLp'K^KYc;MigT94L:b'KPZM(kut*cAR>`\.^t
%_$dsN._d1n#84LFl@FKOeE:`*&/0I70`.l*4EEmN]_OtrpHFq5$lm,UgiuppdWk:7onaEq&GR7PJ;(%UQ*?<^1E[K',3j/>RCM`T
%7UF[k%`\il8r.L"aj%/Z.qg3#L@O-_CI6f1VM^j][I^FD1W!$q&:Pia95okoE?ZmJF9.<R-*'25PRA;kI-UDfX.:#*ijbjOL+=t'
%\jh;)p6$UQ?D]p"I2>cp;e^g.W$^0C3j.:3fEip^n4+QA"\5pQ,3G>eS.@P:Y@4*p+;``%/=,T/)Temc]XR^*&3#QI@b+bBr,LS-
%5Qf$Y(K,&sl>g.C#:]_9ZE'k#i$M$^?j(q-Q@,MU2lQ[AY"=%_;Va,qgl$/m,tnrRi5<Id#@(50!l%;jNegsXC#U^S1J@7r-k:Of
%ZQR/V8?/d&@Oq;]a;V/6)9M'7XLGa/#W7F;iC7%Rqf..S4r"E="@,FJ'/*4A6SXjVE%(4MW/KXhni=K>:JdD^KNU!rB+W93!j_k\
%cgV`N7gW+"jU!JZ=<1D\5,oATq\GP,;2bC3Ll7EC+sK"dAZ1HY(e4^5LgfYpTb\gD!7:qH$+.d`c#FMalW'r4+lY%F;]nIuEO<Y1
%)5a.n-pdN+VT:"BlD.GJUM`B*QXVHP8H`SC:^Vn=%&6X0,U*p0TFd^9/KcMNT(3Rj=jWBJ9R2AhXAI&sUc\fY*aoc3>M13e%W5cP
%nV`Dn`K(4!-K#Gt'?)(.dLZC&+<LYL=On#a&cj'u@Nq$]!%'Wg`Cjb6(>t>Z/9qGb/3o&O@ou58B:+KhV%cj5q/1"iF>JKjJ(2kG
%r$Ke3KG>[bU.Bp2(5=Un[K2IumrqT](rLe,844jX5U$=Yp'4-!777nVj;B#E^`b3H'#ba^@9P,!'N`".4!!,]=8@n<\r,rG5pg[b
%+V7'U'V#^_iG]2M!Z2U8&/=(3d"bG8R)p#s6cL_Zp/jS@B9:.8Gh>!9>!,)49IH[(g<(2Ak1DS?Q2[_U/,2gM%RC9@%Gt!N+V0/<
%'F-#h-HJ,Z_a"XL2&90O`hf>_NGY&;M>(<uPB'#Ilt_>6fMDoI7"L(u4G"IE=dX(hF(EmB$=?a@)SQ?kcsqP.0FS:bAANcr"X!pO
%-o^@A(]^mk'Y"]H&%I>_STi^q74hQei[JKE65D(\&LA>V@>ZMQFB?195onbc<s9?sK9kBtV;U&+\mZ;:ADi#+#8:V*6!k8Z%#Wst
%+!.Om'11paRLm2^7j_8E6KNusYpA*i$2p$\"Y1c/`>SM[=t.E)=2$XU*SgsmnfN!r'gEUjd.;V&+RDe*&:jod`"@6_f=[[]2TT&#
%%-W=?RXl!$!EcT@_&cY@@7;6/!Y6gLYeU`GTKs!`Pu:<GaVH8%A,FVOr1[`KnY<l(ZpJ@mcn%m!&7oKg`(<?[](;#@T>Oa4EjJ])
%P:;!+=(eF!\>DqC]\$E1$-4U@jTp5kgO[4sY;eATa&3Al@C40=W80\R/I#Cr?3NqpNIC5X%0EHBSuAIt7)?jW:?9Eo7S]@D4("AD
%O007;%EqGlNpk_t`YOU6b&7R:g/2*oBB5PX4Q=u14#Onofs'3%4H=j@lr4nga,_7UE$@D"N"9Do7=l-"Wb9TZqE=7[]Wj2>s2],0
%P,0h91Eu.7-<g3>W,RNHBVn+a8K60aG[:Wd-a7]idSONB4F'.Pa2hbGCcc'G(PQIb_ehA=UHk5N4(FYJO0:Gq(#2L!Nph@PhNO/G
%++O&CVc7>>XBk5<M28C#-%@m_\Y:MiRq><Fm2opVB1-N9efdOKil1Rq.4@?;esFZ`ffR"G_+g:9eWh<)<'V+"SEd)LIeYI^bGR4h
%4W21q[fMVB3m*$1A2@')KJ?&D5>KhP.B9j5qWrTS[=PAdG)DU`?rsQ&a3U^Va6O/,qLu%fP_f4JH:bfI5G0\X_NJr_o0nj13Nmn!
%*/:2g\.EjV)']2+F$?tp.'3cMNfH^tBNX=6TP_`#g-PY!jp,dO89WuUj<Wa%Y=LeL*!MHs(L(/M@D$,[@_V-g'\1qUI<IgP1kBH#
%<XO"t1!Z41$XI3t]J6'IaP]\WH(reV^P2uS*U*g"NMuEerAu1Yq3ZCClB\\$&^k@/&P38J9K1f12%-eWPfXbX&8JKT71-\>S._g&
%IMuH3oq0md6]&Ga,4I:ABrhWjn'^-j0V?Cm$C%O$1PR@TnC&#QJQ_;Nd<GP:?W/a]7ct@fg^3+X,q%inU_91p&k][<]Ifa9c=O'c
%&hog.:ldaWO<B:D21]dVhnO/?SZ1)50F;565fp@*76u;gOmQ=:d%u7'(;>m_D3Jgpk9.j:)l)Pb/9H2P>kq'k8.rlDVp@"%:cl0"
%C9)$m(S@P6259Yca7&mI;Z8Kb<A5n."4eW-ch^Zqkoa:-@\>O,WIDjdPJ^ji,_JWKB:XjogEb="]Ip"T<64SF<+5G9Pb"JYqMDia
%3/mF8D,bffq2?Q7Q+0pC-&Q5+-[B0#[n)rDLqGq%-tM$WW8a,$epYrR7hHp6bH<=D83o8K*2lCo:NR]*?>o%UnB=uQ0,];eb_Ti-
%'/2i_O)[HEW(:BCeeWOde^&O4(5*g8knlL(:^'#ab%upGqIq-%q#p8!<)cV,oHS/ti$B,Qj\=eZ%J+Ve/X#6)!cOH@&>D&hWjq/b
%Fl3!.^;%Nue_tS7p1=R1l\QFU8nI'cA[<.!H]0*u>28Ie5&93KjdKLQDWa][9`;b,>U3TsC*PANW_1h5+QPcnm[.fe"Y^3c6!+$T
%pkb"5$=a\D:b%+>Um[O/KN%a(9=g$l;T?Ob4/uL1bo$Z@0\%:6D%]ffb=1`GSEDQ;ku]IUp*/o2C*^.7g*A$%@C'5Z![uIR%1@VX
%m(\.Z\Ds*GIn5R]Kj[>$(Nb+&$;_b-LC]o3i*t5p4;!/*fE:rCXp8_$-?L3)WqHbU#tid6p_>,:lu=$;2Il?L.$"gqUKU,`c(-F[
%cpfr]Qj.0(B[2\49m0Bhj]LH0N;%7'*sX)mj@[QJORSPWDo9P0beV3::Iu08M)GH0]uiDDR#e((:f(&!4Qk"GP?AWEd)QCREM3r3
%klBW',+dqH&!h)2`jQA`4VbH.C2L$>gXA0#X"Cd1@*t_;ppC[^Gc&10Ig60B8sG23%a8s&Kl.W3a-1Z87QkLC'@eBd^NDT"1aa;g
%j,`.ce;UPeg,`meI[!1kTjP8^ZESK[UZ$=FUt0]#bE1s^i)96+UcF@K)l=R-W*P!)C:tuqIdnRUgsjWt&lPV=\N2egDl%';L`$iA
%Y+#1G8O//ijl,);1[5gsWr8C$.GM?9&mY;9U#aMBI4\[P%2$H-=#TD!<Oep"W3JU1qMEK^EWWL')E%%u]O,(m3:)nh!)Y#Q5F.jg
%%90f%dMW2E0NAou2K;`Kje?nTG7+-1/6hX?)kqQA6l9oh8,lYi-n]nO3XXe@^t66YCJ"AjZD=f$EPm[EZ"qi!E#3f]:.iTlL/W$'
%1i\r"ZmGpbjG8:D7F3WQWI".4abT,omjEI99k&"=)_VXP3!_1F)hIf-$e5s23?\X(!_HC9hDe"A@E*7Lggi@M^2HA#a,>YDWK2i!
%`%*d<k]rEI1Vb2Y*64BR_PlrV>]Ad%'JQ,Fl]>?X\DD8^B@OdP=16]J-ia;R4n3-ras1)Nj&BD@,mdM%$O?.C8I;O9Q5o(Q\cC`X
%R1N?fhuU\O5t@DnTRn269`6dY!DV9h..ptUXh8p7d*Zec=jFWE!0"h)Ng^-7l5t8g6sYOM`&.jEMme'(M-M#Y`%r-b[6[bnWq=W%
%$6X!E3<bNb2+rH:CLj3SCS"Z9^_!gHNL2j?Tg7mjj[rqJ`.)?LEsWl[+,WIQM&lnFQrYT7A=qdbNgIBMp_B%4j8mWI_'KFMD?Y$N
%h8QOiPuCY)isR[8dAJ!YJRGNlcOU5HAQ(lA3Vl`p%n%^YDSo*.bna`dg#M:,;;r6J;&^:8Uk)%7Tt60Q*T]V"Y:(Q:'PAsKnof+0
%&iA0n_"&jJI'*g,PRI5X=amRMl1=8)Q?dbM<*jU9;S7F<PWE]ll?*o""n!N4D7Tn6c62V2WO`YIM5q7?(TmS'lSTBL3VmI%?d7AJ
%P^4Sj+GTaV1(8+:eP086[gFY-/7(<%Xdthp`g(Y8!Aouses'-O]J+6XPuiZ)K2UBg>ZF'!a)REn>:f_0GJJ7\(8uI:$<ksU89cp'
%Xs\-3@F\*mgN3fKSUpCPWO`YIM6#X%]34mY+X&$<=f/*M)t6OI*eB49l:fX:VW6`b&DB/t\pt7_CsJHfJN\Y[Gj*DDB78<%)Q23W
%i1?(?UYO-TnM:nH5SIU$'=@HSlY;db`'//[.]>jc"Y05H0k_C0^t+q,Jh.0q<LS+$1/0V6,h5-KL5EJMZ\WDVG.ZH$`J9=#_GI[C
%K'.*YCR9,cRad3M@X4u`j'7LAXn++8Q)%3-ZX2LbC^RY1NcsW;1`lMrrS*kZGMBY7Y%9B@Nu^eWXpCK$,;<GA`9)i#:eQ`o<FQhX
%^TJf?_V2:#Rg]F6aA["_IbLc%+K=qW)eWk?bSmX>S*Xb<O,G4p#68TsWeC0JJa.qf<\!UJ_CGV>P#^9m!cT`J2r<cP2G9S"RY37,
%O?\g=pM#;8o6-%>Y_?s_/c`jtE7Z#X(oOLB+R4f`l6cVLFt&-H7)6_Ds)"9\O9N2RG'V`F;UEQM:UQ`B9[:[Z,Ii--eBOF(N]##J
%?OIRQW1RS_-*L5*=RV32L)spWqi_4ZBUEgGZ[kG4NAI)lf\[`e&0hM?39Lm!d:FFJCNVXKF9Lp$Da=sLBuWG5PgrRYAN2d?m?NP7
%SIVjK#%BY+.?,>NU57p`7XEE4P,A502bZ'LQj*kSR+6)?rEp^GpAKkQ:j#[=bY%b!KD3`\eA/5G%,ep<FsH6^_.!"534fQCf.=lo
%"C*nCfoXHC.tdZeBNBk7bb,%.OQY;Er]M9cN;Olr@0t[A(>77nYRb#;GM?]F"Z`;H:7+'I2P4+h?7c^fQrXPpr.ZS>Bc&-;a`nUS
%Ber-qX124lAn\h8p(k[H[)/!t./kL$C,mNu$8]4(rJ9Bj5T9NC\T<c9<q#TQ!5T"]\e7!JT$nF:^ZTl%B*fY)%AW<E%]bV@Yb/jQ
%@i'jqG5:3'U)HJKe2qX'oR[(N6;V,p.Tl718=8c*Q/uJnmAT52=Ik6\2H=qp1SaC"F@=d9(GX=D<YR?M,ngOfoNK+KSWbZ/Ph]@[
%bHhPVM*RDnIL(footWjCbr[NU5d,efhs_'hbUMPNkV.)k=?JNuA,>_%E_n9LVXf;g-Q,=N0nLH]Z"VSs5J;'C/9S$%.',\c,9rki
%"_qL(%7X'cN?R-hH3T^h,F7llap%n@/?t3TCAB5fC'E%Q5s`YdZQbpKBbm;^3"\6k(@7n)3_1@E]]-4mn3/IT:cT(i^OpN83Y"9*
%bim4mDnI&k@nOH"'e!"+BCn4\n7i;3_<htSqP%&NRq4lIK[dWj)iX1F$<2NqHXi2\Elj;[VO+4G??oT@:COj$^ftAakPc5f-c<o-
%j?6?Q?4[b`JV*;-,$Y^l&YY4:Q.8\%ef\<Nbb\9(**nH-kX^QuSid$'&Fi$6>K-4A,h5(tL1pi(C6,$D>:j%PUG#Lkd^S-g.XhXi
%L`$^Q1k6-=@I;c(N_5*[L@:3W('?lG@lYpl;,@cabH/bPg>;r<NU.PPiOn1[d/YC)0eD-_cICA].oo*"'2_^nIFd%[L=7Uem@Xb0
%qFL*"L'rE!JS:(/]"F8+Y<Z"Q")"!5&>Ae'MQ"eTVXOApIXbs5d>-c!?-0`%(lS8/W(8I"%i4b*lS\;7!2.`85]b2D2X,dJ/;Xs"
%ir&sn4Pj.Obmi]%f<-t!;-aHjpNh/oR_Vp2D,U0=G:Q;nVgiNO,uERm+7/Nl!s-b>m&(d+!rQ_keR_^d5Z7O_DjY4"Tb[s'\D<lr
%5;(674"/:jVA[%*fSe>,5csD:dq<sSNi-BW.ZlF.=T0knJ+,'%^R/,rV\2TD41(2H>aXAn03jc<?5M$dZkU0U9#EYU6\Oh?h#qg1
%i'sNlEj;H^%jU&0Cf2f9L`C=F9$&/@[m8@Z"Pti_+@L&Z<&)SPXS]i3[X6@]"289h\\s.KMmo"fELo<N-C`EED!Wq[[uI&ch8U-Q
%^hmJ='0";W8q%:.hj4:\b7NDa6//-Z[V3<:RF_'kokcG/<sP1D"UOZ1DC6$6.1dd6mKeAT:LieC:qJU5mV/>bO)NEcVLsWM4TsGT
%lSl7pR-gl_D,k@UFl/e9EEd:bXTn[V&A.rI3rFL;$Qto?EC#>O!lHN@]Y_N];;hZm2@UAj]d(DKo)EPE@XBS=>;b,8[C<'_gD2;U
%X/3NG&,mT0rkjR2.rks:_t?.jlo;\MVUr`XZa9:fUU2I(ccPp&oX=[I>K>BfM:u!i[T2_^g$H/t#hrgeY<57gcaA":/69MpFXs&0
%'rt9<q@l_2MUeJ(*Jt)G@U$UPXi"sN`GMYZgT(/EFH5*jMet?(=#q#pn:1AN^\uiX^\uVGIfJ6]^%[G7qTD2"MncFpr5YH/j\MNJ
%kK>O52@)PFmAD&@r;A:@rpAUXr:9f15Q:ND^V7@/qWXoMJ,AlmQiA'*HMd6!0>IM[o.OJ-If7ljru2Y+)8ctLr:+_)lML&L(O.D[3<~>
%AI9_PrivateDataEnd
